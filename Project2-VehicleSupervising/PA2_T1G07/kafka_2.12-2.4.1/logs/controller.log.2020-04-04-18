<<<<<<< HEAD
[2020-04-04 19:03:39,597] INFO [ControllerEventThread controllerId=2] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-04-04 19:03:39,880] DEBUG [Controller id=2] Broker 0 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
=======
[2020-04-04 18:04:22,954] INFO [ControllerEventThread controllerId=0] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-04-04 18:04:23,100] DEBUG [Controller id=0] Broker 1 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2020-04-04 18:11:33,443] DEBUG preRegister called. Server=com.sun.jmx.mbeanserver.JmxMBeanServer@66d3c617, name=log4j:logger=kafka.controller (kafka.controller)
[2020-04-04 18:13:11,519] DEBUG preRegister called. Server=com.sun.jmx.mbeanserver.JmxMBeanServer@66d3c617, name=log4j:logger=kafka.controller (kafka.controller)
[2020-04-04 18:13:13,647] INFO [ControllerEventThread controllerId=1] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-04-04 18:13:13,686] INFO [Controller id=1] 1 successfully elected as the controller. Epoch incremented to 1 and epoch zk version is now 1 (kafka.controller.KafkaController)
[2020-04-04 18:13:13,687] INFO [Controller id=1] Registering handlers (kafka.controller.KafkaController)
[2020-04-04 18:13:13,695] INFO [Controller id=1] Deleting log dir event notifications (kafka.controller.KafkaController)
[2020-04-04 18:13:13,700] INFO [Controller id=1] Deleting isr change notifications (kafka.controller.KafkaController)
[2020-04-04 18:13:13,703] INFO [Controller id=1] Initializing controller context (kafka.controller.KafkaController)
[2020-04-04 18:13:13,715] INFO [ControllerEventThread controllerId=0] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-04-04 18:13:13,731] INFO [ControllerEventThread controllerId=2] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-04-04 18:13:13,737] DEBUG [Controller id=0] Broker 1 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2020-04-04 18:13:13,747] INFO [Controller id=1] Initialized broker epochs cache: Map(0 -> 67, 1 -> 66, 2 -> 68) (kafka.controller.KafkaController)
[2020-04-04 18:13:13,754] DEBUG [Controller id=1] Register BrokerModifications handler for Set(0, 1, 2) (kafka.controller.KafkaController)
[2020-04-04 18:13:13,757] DEBUG [Controller id=2] Broker 1 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2020-04-04 18:13:13,761] DEBUG [Channel manager on controller 1]: Controller 1 trying to connect to broker 0 (kafka.controller.ControllerChannelManager)
[2020-04-04 18:13:13,773] DEBUG [Channel manager on controller 1]: Controller 1 trying to connect to broker 1 (kafka.controller.ControllerChannelManager)
[2020-04-04 18:13:13,776] DEBUG [Channel manager on controller 1]: Controller 1 trying to connect to broker 2 (kafka.controller.ControllerChannelManager)
[2020-04-04 18:13:13,783] INFO [RequestSendThread controllerId=1] Starting (kafka.controller.RequestSendThread)
[2020-04-04 18:13:13,783] INFO [RequestSendThread controllerId=1] Starting (kafka.controller.RequestSendThread)
[2020-04-04 18:13:13,783] INFO [RequestSendThread controllerId=1] Starting (kafka.controller.RequestSendThread)
[2020-04-04 18:13:13,787] INFO [Controller id=1] Currently active brokers in the cluster: Set(0, 1, 2) (kafka.controller.KafkaController)
[2020-04-04 18:13:13,788] INFO [Controller id=1] Currently shutting brokers in the cluster: Set() (kafka.controller.KafkaController)
[2020-04-04 18:13:13,788] INFO [Controller id=1] Current list of topics in the cluster: Set() (kafka.controller.KafkaController)
[2020-04-04 18:13:13,789] INFO [Controller id=1] Fetching topic deletions in progress (kafka.controller.KafkaController)
[2020-04-04 18:13:13,793] INFO [Controller id=1] List of topics to be deleted:  (kafka.controller.KafkaController)
[2020-04-04 18:13:13,793] INFO [Controller id=1] List of topics ineligible for deletion:  (kafka.controller.KafkaController)
[2020-04-04 18:13:13,794] INFO [Controller id=1] Initializing topic deletion manager (kafka.controller.KafkaController)
[2020-04-04 18:13:13,794] INFO [Topic Deletion Manager 1] Initializing manager with initial deletions: Set(), initial ineligible deletions: Set() (kafka.controller.TopicDeletionManager)
[2020-04-04 18:13:13,795] INFO [Controller id=1] Sending update metadata request (kafka.controller.KafkaController)
[2020-04-04 18:13:13,819] INFO [RequestSendThread controllerId=1] Controller 1 connected to pc:9092 (id: 0 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-04 18:13:13,832] INFO [RequestSendThread controllerId=1] Controller 1 connected to pc:9093 (id: 1 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-04 18:13:13,835] INFO [RequestSendThread controllerId=1] Controller 1 connected to pc:9094 (id: 2 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-04 18:13:13,838] INFO [ReplicaStateMachine controllerId=1] Initializing replica state (kafka.controller.ZkReplicaStateMachine)
[2020-04-04 18:13:13,839] INFO [ReplicaStateMachine controllerId=1] Triggering online replica state changes (kafka.controller.ZkReplicaStateMachine)
[2020-04-04 18:13:13,843] INFO [ReplicaStateMachine controllerId=1] Triggering offline replica state changes (kafka.controller.ZkReplicaStateMachine)
[2020-04-04 18:13:13,844] DEBUG [ReplicaStateMachine controllerId=1] Started replica state machine with initial state -> Map() (kafka.controller.ZkReplicaStateMachine)
[2020-04-04 18:13:13,844] INFO [PartitionStateMachine controllerId=1] Initializing partition state (kafka.controller.ZkPartitionStateMachine)
[2020-04-04 18:13:13,845] INFO [PartitionStateMachine controllerId=1] Triggering online partition state changes (kafka.controller.ZkPartitionStateMachine)
[2020-04-04 18:13:13,852] DEBUG [PartitionStateMachine controllerId=1] Started partition state machine with initial state -> Map() (kafka.controller.ZkPartitionStateMachine)
[2020-04-04 18:13:13,853] INFO [Controller id=1] Ready to serve as the new controller with epoch 1 (kafka.controller.KafkaController)
[2020-04-04 18:13:13,858] INFO [Controller id=1] Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2020-04-04 18:13:13,860] INFO [Controller id=1] Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2020-04-04 18:13:13,861] INFO [Controller id=1] Skipping preferred replica election for partitions due to topic deletion:  (kafka.controller.KafkaController)
[2020-04-04 18:13:13,862] INFO [Controller id=1] Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2020-04-04 18:13:13,865] INFO [Controller id=1] Starting replica leader election (PREFERRED) for partitions  triggered by ZkTriggered (kafka.controller.KafkaController)
[2020-04-04 18:13:13,879] INFO [Controller id=1] Starting the controller scheduler (kafka.controller.KafkaController)
[2020-04-04 18:13:14,674] INFO [Controller id=1] New topics: [Set(BatchTopic)], deleted topics: [Set()], new partition replica assignment [Map(BatchTopic-0 -> ReplicaAssignment(replicas=1,0,2, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-04 18:13:14,674] INFO [Controller id=1] New partition creation callback for BatchTopic-0 (kafka.controller.KafkaController)
[2020-04-04 18:13:16,553] INFO [Controller id=1] New topics: [Set(ReportTopic)], deleted topics: [Set()], new partition replica assignment [Map(ReportTopic-0 -> ReplicaAssignment(replicas=1,2,0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-04 18:13:16,554] INFO [Controller id=1] New partition creation callback for ReportTopic-0 (kafka.controller.KafkaController)
[2020-04-04 18:13:18,199] INFO [Controller id=1] New topics: [Set(AlarmTopic)], deleted topics: [Set()], new partition replica assignment [Map(AlarmTopic-0 -> ReplicaAssignment(replicas=2,1,0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-04 18:13:18,199] INFO [Controller id=1] New partition creation callback for AlarmTopic-0 (kafka.controller.KafkaController)
[2020-04-04 18:13:18,880] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-04-04 18:13:18,880] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-04-04 18:13:18,882] DEBUG [Controller id=1] Preferred replicas by broker Map(2 -> Map(AlarmTopic-0 -> Vector(2, 1, 0)), 1 -> Map(ReportTopic-0 -> Vector(1, 2, 0), BatchTopic-0 -> Vector(1, 0, 2))) (kafka.controller.KafkaController)
[2020-04-04 18:13:18,883] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 Map() (kafka.controller.KafkaController)
[2020-04-04 18:13:18,884] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2020-04-04 18:13:18,884] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 Map() (kafka.controller.KafkaController)
[2020-04-04 18:13:18,884] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2020-04-04 18:15:30,197] DEBUG preRegister called. Server=com.sun.jmx.mbeanserver.JmxMBeanServer@66d3c617, name=log4j:logger=kafka.controller (kafka.controller)
[2020-04-04 18:15:32,357] INFO [ControllerEventThread controllerId=0] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-04-04 18:15:32,418] INFO [Controller id=0] 0 successfully elected as the controller. Epoch incremented to 1 and epoch zk version is now 1 (kafka.controller.KafkaController)
[2020-04-04 18:15:32,418] INFO [Controller id=0] Registering handlers (kafka.controller.KafkaController)
[2020-04-04 18:15:32,430] INFO [Controller id=0] Deleting log dir event notifications (kafka.controller.KafkaController)
[2020-04-04 18:15:32,438] INFO [Controller id=0] Deleting isr change notifications (kafka.controller.KafkaController)
[2020-04-04 18:15:32,441] INFO [Controller id=0] Initializing controller context (kafka.controller.KafkaController)
[2020-04-04 18:15:32,458] INFO [ControllerEventThread controllerId=2] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-04-04 18:15:32,478] DEBUG [Controller id=2] Broker 0 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2020-04-04 18:15:32,486] INFO [ControllerEventThread controllerId=1] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-04-04 18:15:32,495] INFO [Controller id=0] Initialized broker epochs cache: Map(0 -> 56, 1 -> 58, 2 -> 57) (kafka.controller.KafkaController)
[2020-04-04 18:15:32,500] DEBUG [Controller id=0] Register BrokerModifications handler for Set(0, 1, 2) (kafka.controller.KafkaController)
[2020-04-04 18:15:32,508] DEBUG [Channel manager on controller 0]: Controller 0 trying to connect to broker 0 (kafka.controller.ControllerChannelManager)
[2020-04-04 18:15:32,521] DEBUG [Channel manager on controller 0]: Controller 0 trying to connect to broker 1 (kafka.controller.ControllerChannelManager)
[2020-04-04 18:15:32,525] DEBUG [Controller id=1] Broker 0 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2020-04-04 18:15:32,537] DEBUG [Channel manager on controller 0]: Controller 0 trying to connect to broker 2 (kafka.controller.ControllerChannelManager)
[2020-04-04 18:15:32,543] INFO [RequestSendThread controllerId=0] Starting (kafka.controller.RequestSendThread)
[2020-04-04 18:15:32,544] INFO [RequestSendThread controllerId=0] Starting (kafka.controller.RequestSendThread)
[2020-04-04 18:15:32,547] INFO [RequestSendThread controllerId=0] Starting (kafka.controller.RequestSendThread)
[2020-04-04 18:15:32,551] INFO [Controller id=0] Currently active brokers in the cluster: Set(0, 1, 2) (kafka.controller.KafkaController)
[2020-04-04 18:15:32,552] INFO [Controller id=0] Currently shutting brokers in the cluster: Set() (kafka.controller.KafkaController)
[2020-04-04 18:15:32,552] INFO [Controller id=0] Current list of topics in the cluster: Set() (kafka.controller.KafkaController)
[2020-04-04 18:15:32,553] INFO [Controller id=0] Fetching topic deletions in progress (kafka.controller.KafkaController)
[2020-04-04 18:15:32,557] INFO [Controller id=0] List of topics to be deleted:  (kafka.controller.KafkaController)
[2020-04-04 18:15:32,557] INFO [Controller id=0] List of topics ineligible for deletion:  (kafka.controller.KafkaController)
[2020-04-04 18:15:32,561] INFO [Controller id=0] Initializing topic deletion manager (kafka.controller.KafkaController)
[2020-04-04 18:15:32,562] INFO [Topic Deletion Manager 0] Initializing manager with initial deletions: Set(), initial ineligible deletions: Set() (kafka.controller.TopicDeletionManager)
[2020-04-04 18:15:32,563] INFO [Controller id=0] Sending update metadata request (kafka.controller.KafkaController)
[2020-04-04 18:15:32,597] INFO [RequestSendThread controllerId=0] Controller 0 connected to pc:9093 (id: 1 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-04 18:15:32,598] INFO [RequestSendThread controllerId=0] Controller 0 connected to pc:9092 (id: 0 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-04 18:15:32,610] INFO [RequestSendThread controllerId=0] Controller 0 connected to pc:9094 (id: 2 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-04 18:15:32,612] INFO [ReplicaStateMachine controllerId=0] Initializing replica state (kafka.controller.ZkReplicaStateMachine)
[2020-04-04 18:15:32,613] INFO [ReplicaStateMachine controllerId=0] Triggering online replica state changes (kafka.controller.ZkReplicaStateMachine)
[2020-04-04 18:15:32,627] INFO [ReplicaStateMachine controllerId=0] Triggering offline replica state changes (kafka.controller.ZkReplicaStateMachine)
[2020-04-04 18:15:32,628] DEBUG [ReplicaStateMachine controllerId=0] Started replica state machine with initial state -> Map() (kafka.controller.ZkReplicaStateMachine)
[2020-04-04 18:15:32,629] INFO [PartitionStateMachine controllerId=0] Initializing partition state (kafka.controller.ZkPartitionStateMachine)
[2020-04-04 18:15:32,630] INFO [PartitionStateMachine controllerId=0] Triggering online partition state changes (kafka.controller.ZkPartitionStateMachine)
[2020-04-04 18:15:32,638] DEBUG [PartitionStateMachine controllerId=0] Started partition state machine with initial state -> Map() (kafka.controller.ZkPartitionStateMachine)
[2020-04-04 18:15:32,638] INFO [Controller id=0] Ready to serve as the new controller with epoch 1 (kafka.controller.KafkaController)
[2020-04-04 18:15:32,656] INFO [Controller id=0] Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2020-04-04 18:15:32,656] INFO [Controller id=0] Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2020-04-04 18:15:32,657] INFO [Controller id=0] Skipping preferred replica election for partitions due to topic deletion:  (kafka.controller.KafkaController)
[2020-04-04 18:15:32,657] INFO [Controller id=0] Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2020-04-04 18:15:32,659] INFO [Controller id=0] Starting replica leader election (PREFERRED) for partitions  triggered by ZkTriggered (kafka.controller.KafkaController)
[2020-04-04 18:15:32,713] INFO [Controller id=0] Starting the controller scheduler (kafka.controller.KafkaController)
[2020-04-04 18:15:33,109] INFO [Controller id=0] New topics: [Set(BatchTopic)], deleted topics: [Set()], new partition replica assignment [Map(BatchTopic-0 -> ReplicaAssignment(replicas=2,1,0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-04 18:15:33,109] INFO [Controller id=0] New partition creation callback for BatchTopic-0 (kafka.controller.KafkaController)
[2020-04-04 18:15:35,217] INFO [Controller id=0] New topics: [Set(ReportTopic)], deleted topics: [Set()], new partition replica assignment [Map(ReportTopic-0 -> ReplicaAssignment(replicas=0,1,2, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-04 18:15:35,217] INFO [Controller id=0] New partition creation callback for ReportTopic-0 (kafka.controller.KafkaController)
[2020-04-04 18:15:36,929] INFO [Controller id=0] New topics: [Set(AlarmTopic)], deleted topics: [Set()], new partition replica assignment [Map(AlarmTopic-0 -> ReplicaAssignment(replicas=2,0,1, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-04 18:15:36,929] INFO [Controller id=0] New partition creation callback for AlarmTopic-0 (kafka.controller.KafkaController)
[2020-04-04 18:15:37,715] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-04-04 18:15:37,715] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-04-04 18:15:37,717] DEBUG [Controller id=0] Preferred replicas by broker Map(2 -> Map(BatchTopic-0 -> Vector(2, 1, 0), AlarmTopic-0 -> Vector(2, 0, 1)), 0 -> Map(ReportTopic-0 -> Vector(0, 1, 2))) (kafka.controller.KafkaController)
[2020-04-04 18:15:37,719] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 Map() (kafka.controller.KafkaController)
[2020-04-04 18:15:37,722] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2020-04-04 18:15:37,722] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-04-04 18:15:37,722] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-04-04 18:16:34,059] DEBUG preRegister called. Server=com.sun.jmx.mbeanserver.JmxMBeanServer@66d3c617, name=log4j:logger=kafka.controller (kafka.controller)
[2020-04-04 18:16:36,823] INFO [ControllerEventThread controllerId=2] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-04-04 18:16:36,996] INFO [Controller id=2] 2 successfully elected as the controller. Epoch incremented to 1 and epoch zk version is now 1 (kafka.controller.KafkaController)
[2020-04-04 18:16:36,998] INFO [Controller id=2] Registering handlers (kafka.controller.KafkaController)
[2020-04-04 18:16:37,014] INFO [Controller id=2] Deleting log dir event notifications (kafka.controller.KafkaController)
[2020-04-04 18:16:37,049] INFO [Controller id=2] Deleting isr change notifications (kafka.controller.KafkaController)
[2020-04-04 18:16:37,084] INFO [Controller id=2] Initializing controller context (kafka.controller.KafkaController)
[2020-04-04 18:16:37,307] INFO [Controller id=2] Initialized broker epochs cache: Map(0 -> 55, 1 -> 58, 2 -> 54) (kafka.controller.KafkaController)
[2020-04-04 18:16:37,319] INFO [ControllerEventThread controllerId=0] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-04-04 18:16:37,339] DEBUG [Controller id=2] Register BrokerModifications handler for Set(0, 1, 2) (kafka.controller.KafkaController)
[2020-04-04 18:16:37,377] INFO [ControllerEventThread controllerId=1] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-04-04 18:16:37,385] DEBUG [Channel manager on controller 2]: Controller 2 trying to connect to broker 0 (kafka.controller.ControllerChannelManager)
[2020-04-04 18:16:37,391] DEBUG [Controller id=0] Broker 2 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2020-04-04 18:16:37,417] DEBUG [Channel manager on controller 2]: Controller 2 trying to connect to broker 1 (kafka.controller.ControllerChannelManager)
[2020-04-04 18:16:37,454] DEBUG [Channel manager on controller 2]: Controller 2 trying to connect to broker 2 (kafka.controller.ControllerChannelManager)
[2020-04-04 18:16:37,475] INFO [RequestSendThread controllerId=2] Starting (kafka.controller.RequestSendThread)
[2020-04-04 18:16:37,476] INFO [RequestSendThread controllerId=2] Starting (kafka.controller.RequestSendThread)
[2020-04-04 18:16:37,480] DEBUG [Controller id=1] Broker 2 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2020-04-04 18:16:37,487] INFO [RequestSendThread controllerId=2] Starting (kafka.controller.RequestSendThread)
[2020-04-04 18:16:37,487] INFO [Controller id=2] Currently active brokers in the cluster: Set(0, 1, 2) (kafka.controller.KafkaController)
[2020-04-04 18:16:37,492] INFO [Controller id=2] Currently shutting brokers in the cluster: Set() (kafka.controller.KafkaController)
[2020-04-04 18:16:37,495] INFO [Controller id=2] Current list of topics in the cluster: Set() (kafka.controller.KafkaController)
[2020-04-04 18:16:37,496] INFO [Controller id=2] Fetching topic deletions in progress (kafka.controller.KafkaController)
[2020-04-04 18:16:37,512] INFO [Controller id=2] List of topics to be deleted:  (kafka.controller.KafkaController)
[2020-04-04 18:16:37,513] INFO [Controller id=2] List of topics ineligible for deletion:  (kafka.controller.KafkaController)
[2020-04-04 18:16:37,514] INFO [Controller id=2] Initializing topic deletion manager (kafka.controller.KafkaController)
[2020-04-04 18:16:37,516] INFO [Topic Deletion Manager 2] Initializing manager with initial deletions: Set(), initial ineligible deletions: Set() (kafka.controller.TopicDeletionManager)
[2020-04-04 18:16:37,518] INFO [Controller id=2] Sending update metadata request (kafka.controller.KafkaController)
[2020-04-04 18:16:37,600] INFO [RequestSendThread controllerId=2] Controller 2 connected to pc:9092 (id: 0 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-04 18:16:37,600] INFO [RequestSendThread controllerId=2] Controller 2 connected to pc:9093 (id: 1 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-04 18:16:37,609] INFO [RequestSendThread controllerId=2] Controller 2 connected to pc:9094 (id: 2 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-04 18:16:37,615] INFO [ReplicaStateMachine controllerId=2] Initializing replica state (kafka.controller.ZkReplicaStateMachine)
[2020-04-04 18:16:37,617] INFO [ReplicaStateMachine controllerId=2] Triggering online replica state changes (kafka.controller.ZkReplicaStateMachine)
[2020-04-04 18:16:37,632] INFO [ReplicaStateMachine controllerId=2] Triggering offline replica state changes (kafka.controller.ZkReplicaStateMachine)
[2020-04-04 18:16:37,634] DEBUG [ReplicaStateMachine controllerId=2] Started replica state machine with initial state -> Map() (kafka.controller.ZkReplicaStateMachine)
[2020-04-04 18:16:37,635] INFO [PartitionStateMachine controllerId=2] Initializing partition state (kafka.controller.ZkPartitionStateMachine)
[2020-04-04 18:16:37,641] INFO [PartitionStateMachine controllerId=2] Triggering online partition state changes (kafka.controller.ZkPartitionStateMachine)
[2020-04-04 18:16:37,659] DEBUG [PartitionStateMachine controllerId=2] Started partition state machine with initial state -> Map() (kafka.controller.ZkPartitionStateMachine)
[2020-04-04 18:16:37,660] INFO [Controller id=2] Ready to serve as the new controller with epoch 1 (kafka.controller.KafkaController)
[2020-04-04 18:16:37,686] INFO [Controller id=2] Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2020-04-04 18:16:37,688] INFO [Controller id=2] Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2020-04-04 18:16:37,690] INFO [Controller id=2] Skipping preferred replica election for partitions due to topic deletion:  (kafka.controller.KafkaController)
[2020-04-04 18:16:37,691] INFO [Controller id=2] Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2020-04-04 18:16:37,694] INFO [Controller id=2] Starting replica leader election (PREFERRED) for partitions  triggered by ZkTriggered (kafka.controller.KafkaController)
[2020-04-04 18:16:37,738] INFO [Controller id=2] Starting the controller scheduler (kafka.controller.KafkaController)
[2020-04-04 18:16:39,235] INFO [Controller id=2] New topics: [Set(BatchTopic)], deleted topics: [Set()], new partition replica assignment [Map(BatchTopic-0 -> ReplicaAssignment(replicas=2,1,0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-04 18:16:39,236] INFO [Controller id=2] New partition creation callback for BatchTopic-0 (kafka.controller.KafkaController)
[2020-04-04 18:16:42,513] INFO [Controller id=2] New topics: [Set(ReportTopic)], deleted topics: [Set()], new partition replica assignment [Map(ReportTopic-0 -> ReplicaAssignment(replicas=2,1,0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-04 18:16:42,513] INFO [Controller id=2] New partition creation callback for ReportTopic-0 (kafka.controller.KafkaController)
[2020-04-04 18:16:42,741] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-04-04 18:16:42,742] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-04-04 18:16:42,749] DEBUG [Controller id=2] Preferred replicas by broker Map(2 -> Map(ReportTopic-0 -> Vector(2, 1, 0), BatchTopic-0 -> Vector(2, 1, 0))) (kafka.controller.KafkaController)
[2020-04-04 18:16:42,752] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 Map() (kafka.controller.KafkaController)
[2020-04-04 18:16:42,754] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2020-04-04 18:16:44,783] INFO [Controller id=2] New topics: [Set(AlarmTopic)], deleted topics: [Set()], new partition replica assignment [Map(AlarmTopic-0 -> ReplicaAssignment(replicas=0,2,1, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-04 18:16:44,784] INFO [Controller id=2] New partition creation callback for AlarmTopic-0 (kafka.controller.KafkaController)
[2020-04-04 18:17:58,558] DEBUG preRegister called. Server=com.sun.jmx.mbeanserver.JmxMBeanServer@66d3c617, name=log4j:logger=kafka.controller (kafka.controller)
[2020-04-04 18:18:01,460] INFO [ControllerEventThread controllerId=2] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-04-04 18:18:01,579] INFO [ControllerEventThread controllerId=0] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-04-04 18:18:01,601] INFO [Controller id=2] 2 successfully elected as the controller. Epoch incremented to 1 and epoch zk version is now 1 (kafka.controller.KafkaController)
[2020-04-04 18:18:01,603] INFO [Controller id=2] Registering handlers (kafka.controller.KafkaController)
[2020-04-04 18:18:01,615] INFO [Controller id=2] Deleting log dir event notifications (kafka.controller.KafkaController)
[2020-04-04 18:18:01,634] INFO [Controller id=2] Deleting isr change notifications (kafka.controller.KafkaController)
[2020-04-04 18:18:01,642] INFO [Controller id=2] Initializing controller context (kafka.controller.KafkaController)
[2020-04-04 18:18:01,660] DEBUG [Controller id=0] Broker 2 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2020-04-04 18:18:01,803] INFO [ControllerEventThread controllerId=1] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-04-04 18:18:01,832] INFO [Controller id=2] Initialized broker epochs cache: Map(0 -> 61, 1 -> 62, 2 -> 60) (kafka.controller.KafkaController)
[2020-04-04 18:18:01,865] DEBUG [Controller id=1] Broker 2 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2020-04-04 18:18:01,903] DEBUG [Controller id=2] Register BrokerModifications handler for Set(0, 1, 2) (kafka.controller.KafkaController)
[2020-04-04 18:18:01,937] DEBUG [Channel manager on controller 2]: Controller 2 trying to connect to broker 0 (kafka.controller.ControllerChannelManager)
[2020-04-04 18:18:01,995] DEBUG [Channel manager on controller 2]: Controller 2 trying to connect to broker 1 (kafka.controller.ControllerChannelManager)
[2020-04-04 18:18:02,011] DEBUG [Channel manager on controller 2]: Controller 2 trying to connect to broker 2 (kafka.controller.ControllerChannelManager)
[2020-04-04 18:18:02,082] INFO [RequestSendThread controllerId=2] Starting (kafka.controller.RequestSendThread)
[2020-04-04 18:18:02,098] INFO [RequestSendThread controllerId=2] Starting (kafka.controller.RequestSendThread)
[2020-04-04 18:18:02,099] INFO [Controller id=2] Currently active brokers in the cluster: Set(0, 1, 2) (kafka.controller.KafkaController)
[2020-04-04 18:18:02,101] INFO [Controller id=2] Currently shutting brokers in the cluster: Set() (kafka.controller.KafkaController)
[2020-04-04 18:18:02,102] INFO [Controller id=2] Current list of topics in the cluster: Set() (kafka.controller.KafkaController)
[2020-04-04 18:18:02,103] INFO [Controller id=2] Fetching topic deletions in progress (kafka.controller.KafkaController)
[2020-04-04 18:18:02,106] INFO [RequestSendThread controllerId=2] Starting (kafka.controller.RequestSendThread)
[2020-04-04 18:18:02,116] INFO [Controller id=2] List of topics to be deleted:  (kafka.controller.KafkaController)
[2020-04-04 18:18:02,117] INFO [Controller id=2] List of topics ineligible for deletion:  (kafka.controller.KafkaController)
[2020-04-04 18:18:02,119] INFO [Controller id=2] Initializing topic deletion manager (kafka.controller.KafkaController)
[2020-04-04 18:18:02,124] INFO [Topic Deletion Manager 2] Initializing manager with initial deletions: Set(), initial ineligible deletions: Set() (kafka.controller.TopicDeletionManager)
[2020-04-04 18:18:02,125] INFO [Controller id=2] Sending update metadata request (kafka.controller.KafkaController)
[2020-04-04 18:18:02,248] INFO [ReplicaStateMachine controllerId=2] Initializing replica state (kafka.controller.ZkReplicaStateMachine)
[2020-04-04 18:18:02,254] INFO [ReplicaStateMachine controllerId=2] Triggering online replica state changes (kafka.controller.ZkReplicaStateMachine)
[2020-04-04 18:18:02,264] INFO [RequestSendThread controllerId=2] Controller 2 connected to pc:9093 (id: 1 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-04 18:18:02,264] INFO [RequestSendThread controllerId=2] Controller 2 connected to pc:9094 (id: 2 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-04 18:18:02,265] INFO [RequestSendThread controllerId=2] Controller 2 connected to pc:9092 (id: 0 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-04 18:18:02,333] INFO [ReplicaStateMachine controllerId=2] Triggering offline replica state changes (kafka.controller.ZkReplicaStateMachine)
[2020-04-04 18:18:02,336] DEBUG [ReplicaStateMachine controllerId=2] Started replica state machine with initial state -> Map() (kafka.controller.ZkReplicaStateMachine)
[2020-04-04 18:18:02,338] INFO [PartitionStateMachine controllerId=2] Initializing partition state (kafka.controller.ZkPartitionStateMachine)
[2020-04-04 18:18:02,340] INFO [PartitionStateMachine controllerId=2] Triggering online partition state changes (kafka.controller.ZkPartitionStateMachine)
[2020-04-04 18:18:02,385] DEBUG [PartitionStateMachine controllerId=2] Started partition state machine with initial state -> Map() (kafka.controller.ZkPartitionStateMachine)
[2020-04-04 18:18:02,386] INFO [Controller id=2] Ready to serve as the new controller with epoch 1 (kafka.controller.KafkaController)
[2020-04-04 18:18:02,410] INFO [Controller id=2] Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2020-04-04 18:18:02,412] INFO [Controller id=2] Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2020-04-04 18:18:02,413] INFO [Controller id=2] Skipping preferred replica election for partitions due to topic deletion:  (kafka.controller.KafkaController)
[2020-04-04 18:18:02,414] INFO [Controller id=2] Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2020-04-04 18:18:02,426] INFO [Controller id=2] Starting replica leader election (PREFERRED) for partitions  triggered by ZkTriggered (kafka.controller.KafkaController)
[2020-04-04 18:18:02,490] INFO [Controller id=2] Starting the controller scheduler (kafka.controller.KafkaController)
[2020-04-04 18:18:03,514] INFO [Controller id=2] New topics: [Set(BatchTopic)], deleted topics: [Set()], new partition replica assignment [Map(BatchTopic-0 -> ReplicaAssignment(replicas=2,0,1, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-04 18:18:03,533] INFO [Controller id=2] New partition creation callback for BatchTopic-0 (kafka.controller.KafkaController)
[2020-04-04 18:18:06,419] INFO [Controller id=2] New topics: [Set(ReportTopic)], deleted topics: [Set()], new partition replica assignment [Map(ReportTopic-0 -> ReplicaAssignment(replicas=0,2,1, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-04 18:18:06,419] INFO [Controller id=2] New partition creation callback for ReportTopic-0 (kafka.controller.KafkaController)
[2020-04-04 18:18:07,493] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-04-04 18:18:07,493] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-04-04 18:18:07,495] DEBUG [Controller id=2] Preferred replicas by broker Map(2 -> Map(BatchTopic-0 -> Vector(2, 0, 1)), 0 -> Map(ReportTopic-0 -> Vector(0, 2, 1))) (kafka.controller.KafkaController)
[2020-04-04 18:18:07,496] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 Map() (kafka.controller.KafkaController)
[2020-04-04 18:18:07,497] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2020-04-04 18:18:07,497] DEBUG [Controller id=2] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-04-04 18:18:07,497] TRACE [Controller id=2] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-04-04 18:18:08,556] INFO [Controller id=2] New topics: [Set(AlarmTopic)], deleted topics: [Set()], new partition replica assignment [Map(AlarmTopic-0 -> ReplicaAssignment(replicas=2,0,1, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-04 18:18:08,556] INFO [Controller id=2] New partition creation callback for AlarmTopic-0 (kafka.controller.KafkaController)
[2020-04-04 18:18:11,772] INFO [Controller id=2] New topics: [Set(__consumer_offsets)], deleted topics: [Set()], new partition replica assignment [Map(__consumer_offsets-22 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-30 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-8 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-21 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-4 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-27 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-7 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-9 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-46 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-25 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-35 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-41 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-33 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-23 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-49 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-47 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-16 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-28 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-31 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-36 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-42 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-3 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-18 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-37 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-15 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-24 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-38 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-17 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-48 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-19 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-11 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-13 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-2 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-43 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-6 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-14 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-20 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-0 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-44 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-39 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-12 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-45 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-1 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-5 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-26 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-29 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-34 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-10 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-32 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-40 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-04 18:18:11,773] INFO [Controller id=2] New partition creation callback for __consumer_offsets-22,__consumer_offsets-30,__consumer_offsets-8,__consumer_offsets-21,__consumer_offsets-4,__consumer_offsets-27,__consumer_offsets-7,__consumer_offsets-9,__consumer_offsets-46,__consumer_offsets-25,__consumer_offsets-35,__consumer_offsets-41,__consumer_offsets-33,__consumer_offsets-23,__consumer_offsets-49,__consumer_offsets-47,__consumer_offsets-16,__consumer_offsets-28,__consumer_offsets-31,__consumer_offsets-36,__consumer_offsets-42,__consumer_offsets-3,__consumer_offsets-18,__consumer_offsets-37,__consumer_offsets-15,__consumer_offsets-24,__consumer_offsets-38,__consumer_offsets-17,__consumer_offsets-48,__consumer_offsets-19,__consumer_offsets-11,__consumer_offsets-13,__consumer_offsets-2,__consumer_offsets-43,__consumer_offsets-6,__consumer_offsets-14,__consumer_offsets-20,__consumer_offsets-0,__consumer_offsets-44,__consumer_offsets-39,__consumer_offsets-12,__consumer_offsets-45,__consumer_offsets-1,__consumer_offsets-5,__consumer_offsets-26,__consumer_offsets-29,__consumer_offsets-34,__consumer_offsets-10,__consumer_offsets-32,__consumer_offsets-40 (kafka.controller.KafkaController)
[2020-04-04 18:20:11,717] DEBUG preRegister called. Server=com.sun.jmx.mbeanserver.JmxMBeanServer@66d3c617, name=log4j:logger=kafka.controller (kafka.controller)
[2020-04-04 18:20:13,919] INFO [ControllerEventThread controllerId=2] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-04-04 18:20:13,971] INFO [Controller id=2] 2 successfully elected as the controller. Epoch incremented to 1 and epoch zk version is now 1 (kafka.controller.KafkaController)
[2020-04-04 18:20:13,971] INFO [Controller id=2] Registering handlers (kafka.controller.KafkaController)
[2020-04-04 18:20:13,976] INFO [Controller id=2] Deleting log dir event notifications (kafka.controller.KafkaController)
[2020-04-04 18:20:13,987] INFO [Controller id=2] Deleting isr change notifications (kafka.controller.KafkaController)
[2020-04-04 18:20:13,989] INFO [Controller id=2] Initializing controller context (kafka.controller.KafkaController)
[2020-04-04 18:20:14,003] INFO [ControllerEventThread controllerId=1] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-04-04 18:20:14,031] DEBUG [Controller id=1] Broker 2 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2020-04-04 18:20:14,045] INFO [Controller id=2] Initialized broker epochs cache: Map(0 -> 56, 1 -> 55, 2 -> 54) (kafka.controller.KafkaController)
[2020-04-04 18:20:14,051] DEBUG [Controller id=2] Register BrokerModifications handler for Set(0, 1, 2) (kafka.controller.KafkaController)
[2020-04-04 18:20:14,059] INFO [ControllerEventThread controllerId=0] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-04-04 18:20:14,062] DEBUG [Channel manager on controller 2]: Controller 2 trying to connect to broker 0 (kafka.controller.ControllerChannelManager)
[2020-04-04 18:20:14,078] DEBUG [Channel manager on controller 2]: Controller 2 trying to connect to broker 1 (kafka.controller.ControllerChannelManager)
[2020-04-04 18:20:14,083] DEBUG [Channel manager on controller 2]: Controller 2 trying to connect to broker 2 (kafka.controller.ControllerChannelManager)
[2020-04-04 18:20:14,089] DEBUG [Controller id=0] Broker 2 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2020-04-04 18:20:14,092] INFO [RequestSendThread controllerId=2] Starting (kafka.controller.RequestSendThread)
[2020-04-04 18:20:14,105] INFO [RequestSendThread controllerId=2] Starting (kafka.controller.RequestSendThread)
[2020-04-04 18:20:14,108] INFO [Controller id=2] Currently active brokers in the cluster: Set(0, 1, 2) (kafka.controller.KafkaController)
[2020-04-04 18:20:14,108] INFO [Controller id=2] Currently shutting brokers in the cluster: Set() (kafka.controller.KafkaController)
[2020-04-04 18:20:14,109] INFO [Controller id=2] Current list of topics in the cluster: Set() (kafka.controller.KafkaController)
[2020-04-04 18:20:14,109] INFO [Controller id=2] Fetching topic deletions in progress (kafka.controller.KafkaController)
[2020-04-04 18:20:14,110] INFO [RequestSendThread controllerId=2] Starting (kafka.controller.RequestSendThread)
[2020-04-04 18:20:14,115] INFO [Controller id=2] List of topics to be deleted:  (kafka.controller.KafkaController)
[2020-04-04 18:20:14,116] INFO [Controller id=2] List of topics ineligible for deletion:  (kafka.controller.KafkaController)
[2020-04-04 18:20:14,116] INFO [Controller id=2] Initializing topic deletion manager (kafka.controller.KafkaController)
[2020-04-04 18:20:14,117] INFO [Topic Deletion Manager 2] Initializing manager with initial deletions: Set(), initial ineligible deletions: Set() (kafka.controller.TopicDeletionManager)
[2020-04-04 18:20:14,118] INFO [Controller id=2] Sending update metadata request (kafka.controller.KafkaController)
[2020-04-04 18:20:14,134] INFO [ReplicaStateMachine controllerId=2] Initializing replica state (kafka.controller.ZkReplicaStateMachine)
[2020-04-04 18:20:14,135] INFO [ReplicaStateMachine controllerId=2] Triggering online replica state changes (kafka.controller.ZkReplicaStateMachine)
[2020-04-04 18:20:14,143] INFO [ReplicaStateMachine controllerId=2] Triggering offline replica state changes (kafka.controller.ZkReplicaStateMachine)
[2020-04-04 18:20:14,144] DEBUG [ReplicaStateMachine controllerId=2] Started replica state machine with initial state -> Map() (kafka.controller.ZkReplicaStateMachine)
[2020-04-04 18:20:14,145] INFO [PartitionStateMachine controllerId=2] Initializing partition state (kafka.controller.ZkPartitionStateMachine)
[2020-04-04 18:20:14,146] INFO [PartitionStateMachine controllerId=2] Triggering online partition state changes (kafka.controller.ZkPartitionStateMachine)
[2020-04-04 18:20:14,148] INFO [RequestSendThread controllerId=2] Controller 2 connected to pc:9094 (id: 2 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-04 18:20:14,148] INFO [RequestSendThread controllerId=2] Controller 2 connected to pc:9093 (id: 1 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-04 18:20:14,150] INFO [RequestSendThread controllerId=2] Controller 2 connected to pc:9092 (id: 0 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-04 18:20:14,161] DEBUG [PartitionStateMachine controllerId=2] Started partition state machine with initial state -> Map() (kafka.controller.ZkPartitionStateMachine)
[2020-04-04 18:20:14,161] INFO [Controller id=2] Ready to serve as the new controller with epoch 1 (kafka.controller.KafkaController)
[2020-04-04 18:20:14,169] INFO [Controller id=2] Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2020-04-04 18:20:14,170] INFO [Controller id=2] Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2020-04-04 18:20:14,171] INFO [Controller id=2] Skipping preferred replica election for partitions due to topic deletion:  (kafka.controller.KafkaController)
[2020-04-04 18:20:14,172] INFO [Controller id=2] Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2020-04-04 18:20:14,174] INFO [Controller id=2] Starting replica leader election (PREFERRED) for partitions  triggered by ZkTriggered (kafka.controller.KafkaController)
[2020-04-04 18:20:14,199] INFO [Controller id=2] Starting the controller scheduler (kafka.controller.KafkaController)
[2020-04-04 18:20:15,498] INFO [Controller id=2] New topics: [Set(BatchTopic)], deleted topics: [Set()], new partition replica assignment [Map(BatchTopic-0 -> ReplicaAssignment(replicas=2,1,0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-04 18:20:15,499] INFO [Controller id=2] New partition creation callback for BatchTopic-0 (kafka.controller.KafkaController)
[2020-04-04 18:20:18,816] INFO [Controller id=2] New topics: [Set(ReportTopic)], deleted topics: [Set()], new partition replica assignment [Map(ReportTopic-0 -> ReplicaAssignment(replicas=2,1,0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-04 18:20:18,816] INFO [Controller id=2] New partition creation callback for ReportTopic-0 (kafka.controller.KafkaController)
[2020-04-04 18:20:19,201] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-04-04 18:20:19,202] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-04-04 18:20:19,207] DEBUG [Controller id=2] Preferred replicas by broker Map(2 -> Map(ReportTopic-0 -> Vector(2, 1, 0), BatchTopic-0 -> Vector(2, 1, 0))) (kafka.controller.KafkaController)
[2020-04-04 18:20:19,212] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 Map() (kafka.controller.KafkaController)
[2020-04-04 18:20:19,215] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2020-04-04 18:20:20,834] INFO [Controller id=2] New topics: [Set(AlarmTopic)], deleted topics: [Set()], new partition replica assignment [Map(AlarmTopic-0 -> ReplicaAssignment(replicas=0,2,1, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-04 18:20:20,834] INFO [Controller id=2] New partition creation callback for AlarmTopic-0 (kafka.controller.KafkaController)
[2020-04-04 18:20:24,115] INFO [Controller id=2] New topics: [Set(__consumer_offsets)], deleted topics: [Set()], new partition replica assignment [Map(__consumer_offsets-22 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-30 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-8 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-21 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-4 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-27 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-7 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-9 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-46 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-25 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-35 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-41 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-33 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-23 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-49 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-47 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-16 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-28 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-31 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-36 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-42 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-3 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-18 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-37 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-15 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-24 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-38 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-17 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-48 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-19 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-11 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-13 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-2 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-43 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-6 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-14 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-20 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-44 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-39 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-12 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-45 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-1 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-5 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-26 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-29 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-34 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-10 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-32 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-40 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-04 18:20:24,116] INFO [Controller id=2] New partition creation callback for __consumer_offsets-22,__consumer_offsets-30,__consumer_offsets-8,__consumer_offsets-21,__consumer_offsets-4,__consumer_offsets-27,__consumer_offsets-7,__consumer_offsets-9,__consumer_offsets-46,__consumer_offsets-25,__consumer_offsets-35,__consumer_offsets-41,__consumer_offsets-33,__consumer_offsets-23,__consumer_offsets-49,__consumer_offsets-47,__consumer_offsets-16,__consumer_offsets-28,__consumer_offsets-31,__consumer_offsets-36,__consumer_offsets-42,__consumer_offsets-3,__consumer_offsets-18,__consumer_offsets-37,__consumer_offsets-15,__consumer_offsets-24,__consumer_offsets-38,__consumer_offsets-17,__consumer_offsets-48,__consumer_offsets-19,__consumer_offsets-11,__consumer_offsets-13,__consumer_offsets-2,__consumer_offsets-43,__consumer_offsets-6,__consumer_offsets-14,__consumer_offsets-20,__consumer_offsets-0,__consumer_offsets-44,__consumer_offsets-39,__consumer_offsets-12,__consumer_offsets-45,__consumer_offsets-1,__consumer_offsets-5,__consumer_offsets-26,__consumer_offsets-29,__consumer_offsets-34,__consumer_offsets-10,__consumer_offsets-32,__consumer_offsets-40 (kafka.controller.KafkaController)
[2020-04-04 18:43:19,404] DEBUG preRegister called. Server=com.sun.jmx.mbeanserver.JmxMBeanServer@66d3c617, name=log4j:logger=kafka.controller (kafka.controller)
[2020-04-04 18:43:22,006] INFO [ControllerEventThread controllerId=0] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-04-04 18:43:22,025] INFO [ControllerEventThread controllerId=2] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-04-04 18:43:22,043] INFO [Controller id=0] 0 successfully elected as the controller. Epoch incremented to 1 and epoch zk version is now 1 (kafka.controller.KafkaController)
[2020-04-04 18:43:22,044] INFO [Controller id=0] Registering handlers (kafka.controller.KafkaController)
[2020-04-04 18:43:22,050] INFO [Controller id=0] Deleting log dir event notifications (kafka.controller.KafkaController)
[2020-04-04 18:43:22,051] INFO [ControllerEventThread controllerId=1] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-04-04 18:43:22,056] INFO [Controller id=0] Deleting isr change notifications (kafka.controller.KafkaController)
[2020-04-04 18:43:22,059] INFO [Controller id=0] Initializing controller context (kafka.controller.KafkaController)
[2020-04-04 18:43:22,074] DEBUG [Controller id=1] Broker 0 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2020-04-04 18:43:22,077] DEBUG [Controller id=2] Broker 0 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2020-04-04 18:43:22,085] INFO [Controller id=0] Initialized broker epochs cache: Map(0 -> 62, 1 -> 64, 2 -> 63) (kafka.controller.KafkaController)
[2020-04-04 18:43:22,091] DEBUG [Controller id=0] Register BrokerModifications handler for Set(0, 1, 2) (kafka.controller.KafkaController)
[2020-04-04 18:43:22,109] DEBUG [Channel manager on controller 0]: Controller 0 trying to connect to broker 0 (kafka.controller.ControllerChannelManager)
[2020-04-04 18:43:22,137] DEBUG [Channel manager on controller 0]: Controller 0 trying to connect to broker 1 (kafka.controller.ControllerChannelManager)
[2020-04-04 18:43:22,144] DEBUG [Channel manager on controller 0]: Controller 0 trying to connect to broker 2 (kafka.controller.ControllerChannelManager)
[2020-04-04 18:43:22,167] INFO [RequestSendThread controllerId=0] Starting (kafka.controller.RequestSendThread)
[2020-04-04 18:43:22,169] INFO [RequestSendThread controllerId=0] Starting (kafka.controller.RequestSendThread)
[2020-04-04 18:43:22,170] INFO [RequestSendThread controllerId=0] Starting (kafka.controller.RequestSendThread)
[2020-04-04 18:43:22,171] INFO [Controller id=0] Currently active brokers in the cluster: Set(0, 1, 2) (kafka.controller.KafkaController)
[2020-04-04 18:43:22,172] INFO [Controller id=0] Currently shutting brokers in the cluster: Set() (kafka.controller.KafkaController)
[2020-04-04 18:43:22,172] INFO [Controller id=0] Current list of topics in the cluster: Set() (kafka.controller.KafkaController)
[2020-04-04 18:43:22,173] INFO [Controller id=0] Fetching topic deletions in progress (kafka.controller.KafkaController)
[2020-04-04 18:43:22,181] INFO [Controller id=0] List of topics to be deleted:  (kafka.controller.KafkaController)
[2020-04-04 18:43:22,181] INFO [Controller id=0] List of topics ineligible for deletion:  (kafka.controller.KafkaController)
[2020-04-04 18:43:22,182] INFO [Controller id=0] Initializing topic deletion manager (kafka.controller.KafkaController)
[2020-04-04 18:43:22,182] INFO [Topic Deletion Manager 0] Initializing manager with initial deletions: Set(), initial ineligible deletions: Set() (kafka.controller.TopicDeletionManager)
[2020-04-04 18:43:22,183] INFO [Controller id=0] Sending update metadata request (kafka.controller.KafkaController)
[2020-04-04 18:43:22,195] INFO [ReplicaStateMachine controllerId=0] Initializing replica state (kafka.controller.ZkReplicaStateMachine)
[2020-04-04 18:43:22,196] INFO [ReplicaStateMachine controllerId=0] Triggering online replica state changes (kafka.controller.ZkReplicaStateMachine)
[2020-04-04 18:43:22,204] INFO [RequestSendThread controllerId=0] Controller 0 connected to pc:9093 (id: 1 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-04 18:43:22,205] INFO [RequestSendThread controllerId=0] Controller 0 connected to pc:9094 (id: 2 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-04 18:43:22,205] INFO [RequestSendThread controllerId=0] Controller 0 connected to pc:9092 (id: 0 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-04 18:43:22,208] INFO [ReplicaStateMachine controllerId=0] Triggering offline replica state changes (kafka.controller.ZkReplicaStateMachine)
[2020-04-04 18:43:22,209] DEBUG [ReplicaStateMachine controllerId=0] Started replica state machine with initial state -> Map() (kafka.controller.ZkReplicaStateMachine)
[2020-04-04 18:43:22,209] INFO [PartitionStateMachine controllerId=0] Initializing partition state (kafka.controller.ZkPartitionStateMachine)
[2020-04-04 18:43:22,210] INFO [PartitionStateMachine controllerId=0] Triggering online partition state changes (kafka.controller.ZkPartitionStateMachine)
[2020-04-04 18:43:22,217] DEBUG [PartitionStateMachine controllerId=0] Started partition state machine with initial state -> Map() (kafka.controller.ZkPartitionStateMachine)
[2020-04-04 18:43:22,217] INFO [Controller id=0] Ready to serve as the new controller with epoch 1 (kafka.controller.KafkaController)
[2020-04-04 18:43:22,226] INFO [Controller id=0] Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2020-04-04 18:43:22,227] INFO [Controller id=0] Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2020-04-04 18:43:22,227] INFO [Controller id=0] Skipping preferred replica election for partitions due to topic deletion:  (kafka.controller.KafkaController)
[2020-04-04 18:43:22,227] INFO [Controller id=0] Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2020-04-04 18:43:22,229] INFO [Controller id=0] Starting replica leader election (PREFERRED) for partitions  triggered by ZkTriggered (kafka.controller.KafkaController)
[2020-04-04 18:43:22,243] INFO [Controller id=0] Starting the controller scheduler (kafka.controller.KafkaController)
[2020-04-04 18:43:22,703] INFO [Controller id=0] New topics: [Set(BatchTopic)], deleted topics: [Set()], new partition replica assignment [Map(BatchTopic-0 -> ReplicaAssignment(replicas=1,0,2, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-04 18:43:22,703] INFO [Controller id=0] New partition creation callback for BatchTopic-0 (kafka.controller.KafkaController)
[2020-04-04 18:43:26,411] INFO [Controller id=0] New topics: [Set(ReportTopic)], deleted topics: [Set()], new partition replica assignment [Map(ReportTopic-0 -> ReplicaAssignment(replicas=0,2,1, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-04 18:43:26,411] INFO [Controller id=0] New partition creation callback for ReportTopic-0 (kafka.controller.KafkaController)
[2020-04-04 18:43:27,244] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-04-04 18:43:27,245] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-04-04 18:43:27,246] DEBUG [Controller id=0] Preferred replicas by broker Map(1 -> Map(BatchTopic-0 -> Vector(1, 0, 2)), 0 -> Map(ReportTopic-0 -> Vector(0, 2, 1))) (kafka.controller.KafkaController)
[2020-04-04 18:43:27,248] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 Map() (kafka.controller.KafkaController)
[2020-04-04 18:43:27,249] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2020-04-04 18:43:27,249] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-04-04 18:43:27,249] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-04-04 18:43:28,830] INFO [Controller id=0] New topics: [Set(AlarmTopic)], deleted topics: [Set()], new partition replica assignment [Map(AlarmTopic-0 -> ReplicaAssignment(replicas=1,2,0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-04 18:43:28,830] INFO [Controller id=0] New partition creation callback for AlarmTopic-0 (kafka.controller.KafkaController)
[2020-04-04 18:43:32,079] INFO [Controller id=0] New topics: [Set(__consumer_offsets)], deleted topics: [Set()], new partition replica assignment [Map(__consumer_offsets-22 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-30 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-8 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-21 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-4 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-27 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-7 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-9 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-46 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-25 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-35 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-41 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-33 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-23 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-49 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-47 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-16 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-28 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-31 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-36 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-42 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-3 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-18 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-37 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-15 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-24 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-38 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-17 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-48 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-19 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-11 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-13 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-2 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-43 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-6 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-14 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-20 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-0 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-44 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-39 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-12 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-45 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-1 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-5 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-26 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-29 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-34 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-10 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-32 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-40 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-04 18:43:32,079] INFO [Controller id=0] New partition creation callback for __consumer_offsets-22,__consumer_offsets-30,__consumer_offsets-8,__consumer_offsets-21,__consumer_offsets-4,__consumer_offsets-27,__consumer_offsets-7,__consumer_offsets-9,__consumer_offsets-46,__consumer_offsets-25,__consumer_offsets-35,__consumer_offsets-41,__consumer_offsets-33,__consumer_offsets-23,__consumer_offsets-49,__consumer_offsets-47,__consumer_offsets-16,__consumer_offsets-28,__consumer_offsets-31,__consumer_offsets-36,__consumer_offsets-42,__consumer_offsets-3,__consumer_offsets-18,__consumer_offsets-37,__consumer_offsets-15,__consumer_offsets-24,__consumer_offsets-38,__consumer_offsets-17,__consumer_offsets-48,__consumer_offsets-19,__consumer_offsets-11,__consumer_offsets-13,__consumer_offsets-2,__consumer_offsets-43,__consumer_offsets-6,__consumer_offsets-14,__consumer_offsets-20,__consumer_offsets-0,__consumer_offsets-44,__consumer_offsets-39,__consumer_offsets-12,__consumer_offsets-45,__consumer_offsets-1,__consumer_offsets-5,__consumer_offsets-26,__consumer_offsets-29,__consumer_offsets-34,__consumer_offsets-10,__consumer_offsets-32,__consumer_offsets-40 (kafka.controller.KafkaController)
[2020-04-04 18:45:18,007] DEBUG preRegister called. Server=com.sun.jmx.mbeanserver.JmxMBeanServer@66d3c617, name=log4j:logger=kafka.controller (kafka.controller)
[2020-04-04 18:45:20,239] INFO [ControllerEventThread controllerId=1] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-04-04 18:45:20,280] INFO [Controller id=1] 1 successfully elected as the controller. Epoch incremented to 1 and epoch zk version is now 1 (kafka.controller.KafkaController)
[2020-04-04 18:45:20,281] INFO [Controller id=1] Registering handlers (kafka.controller.KafkaController)
[2020-04-04 18:45:20,285] INFO [Controller id=1] Deleting log dir event notifications (kafka.controller.KafkaController)
[2020-04-04 18:45:20,290] INFO [Controller id=1] Deleting isr change notifications (kafka.controller.KafkaController)
[2020-04-04 18:45:20,293] INFO [Controller id=1] Initializing controller context (kafka.controller.KafkaController)
[2020-04-04 18:45:20,343] INFO [ControllerEventThread controllerId=0] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-04-04 18:45:20,351] INFO [Controller id=1] Initialized broker epochs cache: Map(0 -> 55, 1 -> 54) (kafka.controller.KafkaController)
[2020-04-04 18:45:20,357] DEBUG [Controller id=1] Register BrokerModifications handler for Set(0, 1) (kafka.controller.KafkaController)
[2020-04-04 18:45:20,368] DEBUG [Channel manager on controller 1]: Controller 1 trying to connect to broker 0 (kafka.controller.ControllerChannelManager)
[2020-04-04 18:45:20,371] DEBUG [Controller id=0] Broker 1 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2020-04-04 18:45:20,383] DEBUG [Channel manager on controller 1]: Controller 1 trying to connect to broker 1 (kafka.controller.ControllerChannelManager)
[2020-04-04 18:45:20,404] INFO [RequestSendThread controllerId=1] Starting (kafka.controller.RequestSendThread)
[2020-04-04 18:45:20,419] INFO [RequestSendThread controllerId=1] Starting (kafka.controller.RequestSendThread)
[2020-04-04 18:45:20,420] INFO [Controller id=1] Currently active brokers in the cluster: Set(0, 1) (kafka.controller.KafkaController)
[2020-04-04 18:45:20,421] INFO [Controller id=1] Currently shutting brokers in the cluster: Set() (kafka.controller.KafkaController)
[2020-04-04 18:45:20,422] INFO [Controller id=1] Current list of topics in the cluster: Set() (kafka.controller.KafkaController)
[2020-04-04 18:45:20,423] INFO [Controller id=1] Fetching topic deletions in progress (kafka.controller.KafkaController)
[2020-04-04 18:45:20,435] INFO [Controller id=1] List of topics to be deleted:  (kafka.controller.KafkaController)
[2020-04-04 18:45:20,436] INFO [Controller id=1] List of topics ineligible for deletion:  (kafka.controller.KafkaController)
[2020-04-04 18:45:20,436] INFO [Controller id=1] Initializing topic deletion manager (kafka.controller.KafkaController)
[2020-04-04 18:45:20,440] INFO [Topic Deletion Manager 1] Initializing manager with initial deletions: Set(), initial ineligible deletions: Set() (kafka.controller.TopicDeletionManager)
[2020-04-04 18:45:20,440] INFO [Controller id=1] Sending update metadata request (kafka.controller.KafkaController)
[2020-04-04 18:45:20,469] INFO [ReplicaStateMachine controllerId=1] Initializing replica state (kafka.controller.ZkReplicaStateMachine)
[2020-04-04 18:45:20,471] INFO [ReplicaStateMachine controllerId=1] Triggering online replica state changes (kafka.controller.ZkReplicaStateMachine)
[2020-04-04 18:45:20,485] INFO [ReplicaStateMachine controllerId=1] Triggering offline replica state changes (kafka.controller.ZkReplicaStateMachine)
[2020-04-04 18:45:20,486] DEBUG [ReplicaStateMachine controllerId=1] Started replica state machine with initial state -> Map() (kafka.controller.ZkReplicaStateMachine)
[2020-04-04 18:45:20,487] INFO [PartitionStateMachine controllerId=1] Initializing partition state (kafka.controller.ZkPartitionStateMachine)
[2020-04-04 18:45:20,489] INFO [PartitionStateMachine controllerId=1] Triggering online partition state changes (kafka.controller.ZkPartitionStateMachine)
[2020-04-04 18:45:20,499] INFO [RequestSendThread controllerId=1] Controller 1 connected to pc:9092 (id: 0 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-04 18:45:20,499] DEBUG [PartitionStateMachine controllerId=1] Started partition state machine with initial state -> Map() (kafka.controller.ZkPartitionStateMachine)
[2020-04-04 18:45:20,500] INFO [Controller id=1] Ready to serve as the new controller with epoch 1 (kafka.controller.KafkaController)
[2020-04-04 18:45:20,507] INFO [RequestSendThread controllerId=1] Controller 1 connected to pc:9093 (id: 1 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-04 18:45:20,510] INFO [Controller id=1] Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2020-04-04 18:45:20,511] INFO [Controller id=1] Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2020-04-04 18:45:20,512] INFO [Controller id=1] Skipping preferred replica election for partitions due to topic deletion:  (kafka.controller.KafkaController)
[2020-04-04 18:45:20,512] INFO [Controller id=1] Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2020-04-04 18:45:20,515] INFO [Controller id=1] Starting replica leader election (PREFERRED) for partitions  triggered by ZkTriggered (kafka.controller.KafkaController)
[2020-04-04 18:45:20,546] INFO [Controller id=1] Starting the controller scheduler (kafka.controller.KafkaController)
[2020-04-04 18:45:20,597] INFO [Controller id=1] Newly added brokers: 2, deleted brokers: , bounced brokers: , all live brokers: 0,1,2 (kafka.controller.KafkaController)
[2020-04-04 18:45:20,599] DEBUG [Channel manager on controller 1]: Controller 1 trying to connect to broker 2 (kafka.controller.ControllerChannelManager)
[2020-04-04 18:45:20,657] INFO [RequestSendThread controllerId=1] Starting (kafka.controller.RequestSendThread)
[2020-04-04 18:45:20,662] INFO [Controller id=1] New broker startup callback for 2 (kafka.controller.KafkaController)
[2020-04-04 18:45:20,669] INFO [RequestSendThread controllerId=1] Controller 1 connected to pc:9094 (id: 2 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-04 18:45:20,677] DEBUG [Controller id=1] Register BrokerModifications handler for Vector(2) (kafka.controller.KafkaController)
[2020-04-04 18:45:20,682] INFO [Controller id=1] Updated broker epochs cache: Map(0 -> 55, 1 -> 54, 2 -> 59) (kafka.controller.KafkaController)
[2020-04-04 18:45:20,699] INFO [ControllerEventThread controllerId=2] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-04-04 18:45:20,750] DEBUG [Controller id=2] Broker 1 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2020-04-04 18:45:22,112] INFO [Controller id=1] New topics: [Set(BatchTopic)], deleted topics: [Set()], new partition replica assignment [Map(BatchTopic-0 -> ReplicaAssignment(replicas=1,0,2, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-04 18:45:22,114] INFO [Controller id=1] New partition creation callback for BatchTopic-0 (kafka.controller.KafkaController)
[2020-04-04 18:45:25,548] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-04-04 18:45:25,548] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-04-04 18:45:25,550] DEBUG [Controller id=1] Preferred replicas by broker Map(1 -> Map(BatchTopic-0 -> Vector(1, 0, 2))) (kafka.controller.KafkaController)
[2020-04-04 18:45:25,551] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 Map() (kafka.controller.KafkaController)
[2020-04-04 18:45:25,553] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2020-04-04 18:45:25,712] INFO [Controller id=1] New topics: [Set(ReportTopic)], deleted topics: [Set()], new partition replica assignment [Map(ReportTopic-0 -> ReplicaAssignment(replicas=2,0,1, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-04 18:45:25,712] INFO [Controller id=1] New partition creation callback for ReportTopic-0 (kafka.controller.KafkaController)
[2020-04-04 18:45:27,899] INFO [Controller id=1] New topics: [Set(AlarmTopic)], deleted topics: [Set()], new partition replica assignment [Map(AlarmTopic-0 -> ReplicaAssignment(replicas=1,0,2, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-04 18:45:27,899] INFO [Controller id=1] New partition creation callback for AlarmTopic-0 (kafka.controller.KafkaController)
[2020-04-04 18:45:31,021] INFO [Controller id=1] New topics: [Set(__consumer_offsets)], deleted topics: [Set()], new partition replica assignment [Map(__consumer_offsets-22 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-30 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-8 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-21 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-4 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-27 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-7 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-9 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-46 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-25 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-35 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-41 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-33 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-23 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-49 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-47 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-16 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-28 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-31 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-36 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-42 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-3 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-18 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-37 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-15 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-24 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-38 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-17 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-48 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-19 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-11 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-13 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-2 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-43 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-6 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-14 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-20 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-0 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-44 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-39 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-12 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-45 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-1 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-5 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-26 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-29 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-34 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-10 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-32 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-40 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-04 18:45:31,021] INFO [Controller id=1] New partition creation callback for __consumer_offsets-22,__consumer_offsets-30,__consumer_offsets-8,__consumer_offsets-21,__consumer_offsets-4,__consumer_offsets-27,__consumer_offsets-7,__consumer_offsets-9,__consumer_offsets-46,__consumer_offsets-25,__consumer_offsets-35,__consumer_offsets-41,__consumer_offsets-33,__consumer_offsets-23,__consumer_offsets-49,__consumer_offsets-47,__consumer_offsets-16,__consumer_offsets-28,__consumer_offsets-31,__consumer_offsets-36,__consumer_offsets-42,__consumer_offsets-3,__consumer_offsets-18,__consumer_offsets-37,__consumer_offsets-15,__consumer_offsets-24,__consumer_offsets-38,__consumer_offsets-17,__consumer_offsets-48,__consumer_offsets-19,__consumer_offsets-11,__consumer_offsets-13,__consumer_offsets-2,__consumer_offsets-43,__consumer_offsets-6,__consumer_offsets-14,__consumer_offsets-20,__consumer_offsets-0,__consumer_offsets-44,__consumer_offsets-39,__consumer_offsets-12,__consumer_offsets-45,__consumer_offsets-1,__consumer_offsets-5,__consumer_offsets-26,__consumer_offsets-29,__consumer_offsets-34,__consumer_offsets-10,__consumer_offsets-32,__consumer_offsets-40 (kafka.controller.KafkaController)
[2020-04-04 18:46:42,103] DEBUG preRegister called. Server=com.sun.jmx.mbeanserver.JmxMBeanServer@66d3c617, name=log4j:logger=kafka.controller (kafka.controller)
[2020-04-04 18:46:46,003] INFO [ControllerEventThread controllerId=2] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-04-04 18:46:46,055] INFO [ControllerEventThread controllerId=1] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-04-04 18:46:46,092] INFO [Controller id=2] 2 successfully elected as the controller. Epoch incremented to 1 and epoch zk version is now 1 (kafka.controller.KafkaController)
[2020-04-04 18:46:46,093] INFO [Controller id=2] Registering handlers (kafka.controller.KafkaController)
[2020-04-04 18:46:46,120] INFO [Controller id=2] Deleting log dir event notifications (kafka.controller.KafkaController)
[2020-04-04 18:46:46,135] INFO [Controller id=2] Deleting isr change notifications (kafka.controller.KafkaController)
[2020-04-04 18:46:46,147] INFO [Controller id=2] Initializing controller context (kafka.controller.KafkaController)
[2020-04-04 18:46:46,169] DEBUG [Controller id=1] Broker 2 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2020-04-04 18:46:46,209] INFO [ControllerEventThread controllerId=0] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-04-04 18:46:46,279] DEBUG [Controller id=0] Broker 2 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2020-04-04 18:46:46,310] INFO [Controller id=2] Initialized broker epochs cache: Map(0 -> 62, 1 -> 61, 2 -> 60) (kafka.controller.KafkaController)
[2020-04-04 18:46:46,334] DEBUG [Controller id=2] Register BrokerModifications handler for Set(0, 1, 2) (kafka.controller.KafkaController)
[2020-04-04 18:46:46,362] DEBUG [Channel manager on controller 2]: Controller 2 trying to connect to broker 0 (kafka.controller.ControllerChannelManager)
[2020-04-04 18:46:46,421] DEBUG [Channel manager on controller 2]: Controller 2 trying to connect to broker 1 (kafka.controller.ControllerChannelManager)
[2020-04-04 18:46:46,477] DEBUG [Channel manager on controller 2]: Controller 2 trying to connect to broker 2 (kafka.controller.ControllerChannelManager)
[2020-04-04 18:46:46,555] INFO [RequestSendThread controllerId=2] Starting (kafka.controller.RequestSendThread)
[2020-04-04 18:46:46,561] INFO [Controller id=2] Currently active brokers in the cluster: Set(0, 1, 2) (kafka.controller.KafkaController)
[2020-04-04 18:46:46,562] INFO [Controller id=2] Currently shutting brokers in the cluster: Set() (kafka.controller.KafkaController)
[2020-04-04 18:46:46,564] INFO [Controller id=2] Current list of topics in the cluster: Set() (kafka.controller.KafkaController)
[2020-04-04 18:46:46,565] INFO [Controller id=2] Fetching topic deletions in progress (kafka.controller.KafkaController)
[2020-04-04 18:46:46,567] INFO [RequestSendThread controllerId=2] Starting (kafka.controller.RequestSendThread)
[2020-04-04 18:46:46,569] INFO [RequestSendThread controllerId=2] Starting (kafka.controller.RequestSendThread)
[2020-04-04 18:46:46,587] INFO [Controller id=2] List of topics to be deleted:  (kafka.controller.KafkaController)
[2020-04-04 18:46:46,588] INFO [Controller id=2] List of topics ineligible for deletion:  (kafka.controller.KafkaController)
[2020-04-04 18:46:46,591] INFO [Controller id=2] Initializing topic deletion manager (kafka.controller.KafkaController)
[2020-04-04 18:46:46,593] INFO [Topic Deletion Manager 2] Initializing manager with initial deletions: Set(), initial ineligible deletions: Set() (kafka.controller.TopicDeletionManager)
[2020-04-04 18:46:46,596] INFO [Controller id=2] Sending update metadata request (kafka.controller.KafkaController)
[2020-04-04 18:46:46,655] INFO [ReplicaStateMachine controllerId=2] Initializing replica state (kafka.controller.ZkReplicaStateMachine)
[2020-04-04 18:46:46,686] INFO [RequestSendThread controllerId=2] Controller 2 connected to pc:9094 (id: 2 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-04 18:46:46,687] INFO [RequestSendThread controllerId=2] Controller 2 connected to pc:9093 (id: 1 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-04 18:46:46,689] INFO [RequestSendThread controllerId=2] Controller 2 connected to pc:9092 (id: 0 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-04 18:46:46,704] INFO [ReplicaStateMachine controllerId=2] Triggering online replica state changes (kafka.controller.ZkReplicaStateMachine)
[2020-04-04 18:46:46,737] INFO [ReplicaStateMachine controllerId=2] Triggering offline replica state changes (kafka.controller.ZkReplicaStateMachine)
[2020-04-04 18:46:46,739] DEBUG [ReplicaStateMachine controllerId=2] Started replica state machine with initial state -> Map() (kafka.controller.ZkReplicaStateMachine)
[2020-04-04 18:46:46,741] INFO [PartitionStateMachine controllerId=2] Initializing partition state (kafka.controller.ZkPartitionStateMachine)
[2020-04-04 18:46:46,743] INFO [PartitionStateMachine controllerId=2] Triggering online partition state changes (kafka.controller.ZkPartitionStateMachine)
[2020-04-04 18:46:46,763] DEBUG [PartitionStateMachine controllerId=2] Started partition state machine with initial state -> Map() (kafka.controller.ZkPartitionStateMachine)
[2020-04-04 18:46:46,764] INFO [Controller id=2] Ready to serve as the new controller with epoch 1 (kafka.controller.KafkaController)
[2020-04-04 18:46:46,823] INFO [Controller id=2] Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2020-04-04 18:46:46,824] INFO [Controller id=2] Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2020-04-04 18:46:46,825] INFO [Controller id=2] Skipping preferred replica election for partitions due to topic deletion:  (kafka.controller.KafkaController)
[2020-04-04 18:46:46,827] INFO [Controller id=2] Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2020-04-04 18:46:46,830] INFO [Controller id=2] Starting replica leader election (PREFERRED) for partitions  triggered by ZkTriggered (kafka.controller.KafkaController)
[2020-04-04 18:46:46,918] INFO [Controller id=2] Starting the controller scheduler (kafka.controller.KafkaController)
[2020-04-04 18:46:48,018] INFO [Controller id=2] New topics: [Set(BatchTopic)], deleted topics: [Set()], new partition replica assignment [Map(BatchTopic-0 -> ReplicaAssignment(replicas=1,0,2, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-04 18:46:48,020] INFO [Controller id=2] New partition creation callback for BatchTopic-0 (kafka.controller.KafkaController)
[2020-04-04 18:46:51,800] INFO [Controller id=2] New topics: [Set(ReportTopic)], deleted topics: [Set()], new partition replica assignment [Map(ReportTopic-0 -> ReplicaAssignment(replicas=0,1,2, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-04 18:46:51,800] INFO [Controller id=2] New partition creation callback for ReportTopic-0 (kafka.controller.KafkaController)
[2020-04-04 18:46:51,922] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-04-04 18:46:51,922] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-04-04 18:46:51,924] DEBUG [Controller id=2] Preferred replicas by broker Map(1 -> Map(BatchTopic-0 -> Vector(1, 0, 2)), 0 -> Map(ReportTopic-0 -> Vector(0, 1, 2))) (kafka.controller.KafkaController)
[2020-04-04 18:46:51,926] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 Map() (kafka.controller.KafkaController)
[2020-04-04 18:46:51,927] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2020-04-04 18:46:51,927] DEBUG [Controller id=2] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-04-04 18:46:51,927] TRACE [Controller id=2] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-04-04 18:46:54,114] INFO [Controller id=2] New topics: [Set(AlarmTopic)], deleted topics: [Set()], new partition replica assignment [Map(AlarmTopic-0 -> ReplicaAssignment(replicas=1,2,0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-04 18:46:54,114] INFO [Controller id=2] New partition creation callback for AlarmTopic-0 (kafka.controller.KafkaController)
[2020-04-04 18:48:32,302] DEBUG preRegister called. Server=com.sun.jmx.mbeanserver.JmxMBeanServer@66d3c617, name=log4j:logger=kafka.controller (kafka.controller)
[2020-04-04 18:48:34,840] INFO [ControllerEventThread controllerId=2] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-04-04 18:48:35,000] INFO [Controller id=2] 2 successfully elected as the controller. Epoch incremented to 1 and epoch zk version is now 1 (kafka.controller.KafkaController)
[2020-04-04 18:48:35,002] INFO [Controller id=2] Registering handlers (kafka.controller.KafkaController)
[2020-04-04 18:48:35,019] INFO [Controller id=2] Deleting log dir event notifications (kafka.controller.KafkaController)
[2020-04-04 18:48:35,048] INFO [Controller id=2] Deleting isr change notifications (kafka.controller.KafkaController)
[2020-04-04 18:48:35,057] INFO [Controller id=2] Initializing controller context (kafka.controller.KafkaController)
[2020-04-04 18:48:35,088] INFO [ControllerEventThread controllerId=0] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-04-04 18:48:35,091] INFO [ControllerEventThread controllerId=1] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-04-04 18:48:35,165] DEBUG [Controller id=1] Broker 2 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2020-04-04 18:48:35,174] DEBUG [Controller id=0] Broker 2 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2020-04-04 18:48:35,215] INFO [Controller id=2] Initialized broker epochs cache: Map(0 -> 55, 1 -> 56, 2 -> 54) (kafka.controller.KafkaController)
[2020-04-04 18:48:35,226] DEBUG [Controller id=2] Register BrokerModifications handler for Set(0, 1, 2) (kafka.controller.KafkaController)
[2020-04-04 18:48:35,268] DEBUG [Channel manager on controller 2]: Controller 2 trying to connect to broker 0 (kafka.controller.ControllerChannelManager)
[2020-04-04 18:48:35,303] DEBUG [Channel manager on controller 2]: Controller 2 trying to connect to broker 1 (kafka.controller.ControllerChannelManager)
[2020-04-04 18:48:35,335] DEBUG [Channel manager on controller 2]: Controller 2 trying to connect to broker 2 (kafka.controller.ControllerChannelManager)
[2020-04-04 18:48:35,353] INFO [RequestSendThread controllerId=2] Starting (kafka.controller.RequestSendThread)
[2020-04-04 18:48:35,387] INFO [RequestSendThread controllerId=2] Starting (kafka.controller.RequestSendThread)
[2020-04-04 18:48:35,391] INFO [RequestSendThread controllerId=2] Starting (kafka.controller.RequestSendThread)
[2020-04-04 18:48:35,405] INFO [Controller id=2] Currently active brokers in the cluster: Set(0, 1, 2) (kafka.controller.KafkaController)
[2020-04-04 18:48:35,407] INFO [Controller id=2] Currently shutting brokers in the cluster: Set() (kafka.controller.KafkaController)
[2020-04-04 18:48:35,410] INFO [Controller id=2] Current list of topics in the cluster: Set() (kafka.controller.KafkaController)
[2020-04-04 18:48:35,420] INFO [Controller id=2] Fetching topic deletions in progress (kafka.controller.KafkaController)
[2020-04-04 18:48:35,438] INFO [Controller id=2] List of topics to be deleted:  (kafka.controller.KafkaController)
[2020-04-04 18:48:35,439] INFO [Controller id=2] List of topics ineligible for deletion:  (kafka.controller.KafkaController)
[2020-04-04 18:48:35,440] INFO [Controller id=2] Initializing topic deletion manager (kafka.controller.KafkaController)
[2020-04-04 18:48:35,442] INFO [Topic Deletion Manager 2] Initializing manager with initial deletions: Set(), initial ineligible deletions: Set() (kafka.controller.TopicDeletionManager)
[2020-04-04 18:48:35,444] INFO [Controller id=2] Sending update metadata request (kafka.controller.KafkaController)
[2020-04-04 18:48:35,565] INFO [ReplicaStateMachine controllerId=2] Initializing replica state (kafka.controller.ZkReplicaStateMachine)
[2020-04-04 18:48:35,570] INFO [ReplicaStateMachine controllerId=2] Triggering online replica state changes (kafka.controller.ZkReplicaStateMachine)
[2020-04-04 18:48:35,578] INFO [RequestSendThread controllerId=2] Controller 2 connected to pc:9094 (id: 2 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-04 18:48:35,578] INFO [RequestSendThread controllerId=2] Controller 2 connected to pc:9092 (id: 0 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-04 18:48:35,582] INFO [RequestSendThread controllerId=2] Controller 2 connected to pc:9093 (id: 1 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-04 18:48:35,591] INFO [ReplicaStateMachine controllerId=2] Triggering offline replica state changes (kafka.controller.ZkReplicaStateMachine)
[2020-04-04 18:48:35,593] DEBUG [ReplicaStateMachine controllerId=2] Started replica state machine with initial state -> Map() (kafka.controller.ZkReplicaStateMachine)
[2020-04-04 18:48:35,595] INFO [PartitionStateMachine controllerId=2] Initializing partition state (kafka.controller.ZkPartitionStateMachine)
[2020-04-04 18:48:35,617] INFO [PartitionStateMachine controllerId=2] Triggering online partition state changes (kafka.controller.ZkPartitionStateMachine)
[2020-04-04 18:48:35,640] DEBUG [PartitionStateMachine controllerId=2] Started partition state machine with initial state -> Map() (kafka.controller.ZkPartitionStateMachine)
[2020-04-04 18:48:35,641] INFO [Controller id=2] Ready to serve as the new controller with epoch 1 (kafka.controller.KafkaController)
[2020-04-04 18:48:35,667] INFO [Controller id=2] Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2020-04-04 18:48:35,668] INFO [Controller id=2] Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2020-04-04 18:48:35,669] INFO [Controller id=2] Skipping preferred replica election for partitions due to topic deletion:  (kafka.controller.KafkaController)
[2020-04-04 18:48:35,671] INFO [Controller id=2] Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2020-04-04 18:48:35,701] INFO [Controller id=2] Starting replica leader election (PREFERRED) for partitions  triggered by ZkTriggered (kafka.controller.KafkaController)
[2020-04-04 18:48:35,797] INFO [Controller id=2] Starting the controller scheduler (kafka.controller.KafkaController)
[2020-04-04 18:48:36,954] INFO [Controller id=2] New topics: [Set(BatchTopic)], deleted topics: [Set()], new partition replica assignment [Map(BatchTopic-0 -> ReplicaAssignment(replicas=0,1,2, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-04 18:48:36,956] INFO [Controller id=2] New partition creation callback for BatchTopic-0 (kafka.controller.KafkaController)
[2020-04-04 18:48:40,555] INFO [Controller id=2] New topics: [Set(ReportTopic)], deleted topics: [Set()], new partition replica assignment [Map(ReportTopic-0 -> ReplicaAssignment(replicas=1,0,2, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-04 18:48:40,555] INFO [Controller id=2] New partition creation callback for ReportTopic-0 (kafka.controller.KafkaController)
[2020-04-04 18:48:40,802] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-04-04 18:48:40,803] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-04-04 18:48:40,810] DEBUG [Controller id=2] Preferred replicas by broker Map(1 -> Map(ReportTopic-0 -> Vector(1, 0, 2)), 0 -> Map(BatchTopic-0 -> Vector(0, 1, 2))) (kafka.controller.KafkaController)
[2020-04-04 18:48:40,815] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 Map() (kafka.controller.KafkaController)
[2020-04-04 18:48:40,818] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2020-04-04 18:48:40,818] DEBUG [Controller id=2] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-04-04 18:48:40,818] TRACE [Controller id=2] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-04-04 18:48:42,583] INFO [Controller id=2] New topics: [Set(AlarmTopic)], deleted topics: [Set()], new partition replica assignment [Map(AlarmTopic-0 -> ReplicaAssignment(replicas=0,1,2, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-04 18:48:42,583] INFO [Controller id=2] New partition creation callback for AlarmTopic-0 (kafka.controller.KafkaController)
[2020-04-04 18:51:45,599] DEBUG preRegister called. Server=com.sun.jmx.mbeanserver.JmxMBeanServer@66d3c617, name=log4j:logger=kafka.controller (kafka.controller)
[2020-04-04 18:51:47,941] INFO [ControllerEventThread controllerId=2] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-04-04 18:51:47,975] INFO [ControllerEventThread controllerId=0] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-04-04 18:51:47,992] INFO [Controller id=2] 2 successfully elected as the controller. Epoch incremented to 1 and epoch zk version is now 1 (kafka.controller.KafkaController)
[2020-04-04 18:51:47,992] INFO [Controller id=2] Registering handlers (kafka.controller.KafkaController)
[2020-04-04 18:51:48,000] INFO [Controller id=2] Deleting log dir event notifications (kafka.controller.KafkaController)
[2020-04-04 18:51:48,005] DEBUG [Controller id=0] Broker 2 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2020-04-04 18:51:48,008] INFO [Controller id=2] Deleting isr change notifications (kafka.controller.KafkaController)
[2020-04-04 18:51:48,013] INFO [Controller id=2] Initializing controller context (kafka.controller.KafkaController)
[2020-04-04 18:51:48,071] INFO [Controller id=2] Initialized broker epochs cache: Map(0 -> 55, 1 -> 58, 2 -> 54) (kafka.controller.KafkaController)
[2020-04-04 18:51:48,079] DEBUG [Controller id=2] Register BrokerModifications handler for Set(0, 1, 2) (kafka.controller.KafkaController)
[2020-04-04 18:51:48,095] DEBUG [Channel manager on controller 2]: Controller 2 trying to connect to broker 0 (kafka.controller.ControllerChannelManager)
[2020-04-04 18:51:48,108] DEBUG [Channel manager on controller 2]: Controller 2 trying to connect to broker 1 (kafka.controller.ControllerChannelManager)
[2020-04-04 18:51:48,115] DEBUG [Channel manager on controller 2]: Controller 2 trying to connect to broker 2 (kafka.controller.ControllerChannelManager)
[2020-04-04 18:51:48,131] INFO [ControllerEventThread controllerId=1] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-04-04 18:51:48,148] INFO [RequestSendThread controllerId=2] Starting (kafka.controller.RequestSendThread)
[2020-04-04 18:51:48,151] INFO [RequestSendThread controllerId=2] Starting (kafka.controller.RequestSendThread)
[2020-04-04 18:51:48,153] DEBUG [Controller id=1] Broker 2 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2020-04-04 18:51:48,167] INFO [RequestSendThread controllerId=2] Starting (kafka.controller.RequestSendThread)
[2020-04-04 18:51:48,168] INFO [Controller id=2] Currently active brokers in the cluster: Set(0, 1, 2) (kafka.controller.KafkaController)
[2020-04-04 18:51:48,168] INFO [Controller id=2] Currently shutting brokers in the cluster: Set() (kafka.controller.KafkaController)
[2020-04-04 18:51:48,169] INFO [Controller id=2] Current list of topics in the cluster: Set() (kafka.controller.KafkaController)
[2020-04-04 18:51:48,169] INFO [Controller id=2] Fetching topic deletions in progress (kafka.controller.KafkaController)
[2020-04-04 18:51:48,172] INFO [Controller id=2] List of topics to be deleted:  (kafka.controller.KafkaController)
[2020-04-04 18:51:48,173] INFO [Controller id=2] List of topics ineligible for deletion:  (kafka.controller.KafkaController)
[2020-04-04 18:51:48,173] INFO [Controller id=2] Initializing topic deletion manager (kafka.controller.KafkaController)
[2020-04-04 18:51:48,174] INFO [Topic Deletion Manager 2] Initializing manager with initial deletions: Set(), initial ineligible deletions: Set() (kafka.controller.TopicDeletionManager)
[2020-04-04 18:51:48,174] INFO [Controller id=2] Sending update metadata request (kafka.controller.KafkaController)
[2020-04-04 18:51:48,194] INFO [ReplicaStateMachine controllerId=2] Initializing replica state (kafka.controller.ZkReplicaStateMachine)
[2020-04-04 18:51:48,195] INFO [ReplicaStateMachine controllerId=2] Triggering online replica state changes (kafka.controller.ZkReplicaStateMachine)
[2020-04-04 18:51:48,200] INFO [ReplicaStateMachine controllerId=2] Triggering offline replica state changes (kafka.controller.ZkReplicaStateMachine)
[2020-04-04 18:51:48,201] INFO [RequestSendThread controllerId=2] Controller 2 connected to pc:9094 (id: 2 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-04 18:51:48,201] INFO [RequestSendThread controllerId=2] Controller 2 connected to pc:9092 (id: 0 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-04 18:51:48,201] DEBUG [ReplicaStateMachine controllerId=2] Started replica state machine with initial state -> Map() (kafka.controller.ZkReplicaStateMachine)
[2020-04-04 18:51:48,201] INFO [RequestSendThread controllerId=2] Controller 2 connected to pc:9093 (id: 1 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-04 18:51:48,202] INFO [PartitionStateMachine controllerId=2] Initializing partition state (kafka.controller.ZkPartitionStateMachine)
[2020-04-04 18:51:48,204] INFO [PartitionStateMachine controllerId=2] Triggering online partition state changes (kafka.controller.ZkPartitionStateMachine)
[2020-04-04 18:51:48,210] DEBUG [PartitionStateMachine controllerId=2] Started partition state machine with initial state -> Map() (kafka.controller.ZkPartitionStateMachine)
[2020-04-04 18:51:48,210] INFO [Controller id=2] Ready to serve as the new controller with epoch 1 (kafka.controller.KafkaController)
[2020-04-04 18:51:48,217] INFO [Controller id=2] Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2020-04-04 18:51:48,217] INFO [Controller id=2] Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2020-04-04 18:51:48,217] INFO [Controller id=2] Skipping preferred replica election for partitions due to topic deletion:  (kafka.controller.KafkaController)
[2020-04-04 18:51:48,218] INFO [Controller id=2] Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2020-04-04 18:51:48,219] INFO [Controller id=2] Starting replica leader election (PREFERRED) for partitions  triggered by ZkTriggered (kafka.controller.KafkaController)
[2020-04-04 18:51:48,241] INFO [Controller id=2] Starting the controller scheduler (kafka.controller.KafkaController)
[2020-04-04 18:51:48,660] INFO [Controller id=2] New topics: [Set(BatchTopic)], deleted topics: [Set()], new partition replica assignment [Map(BatchTopic-0 -> ReplicaAssignment(replicas=0,1,2, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-04 18:51:48,661] INFO [Controller id=2] New partition creation callback for BatchTopic-0 (kafka.controller.KafkaController)
[2020-04-04 18:51:51,348] INFO [Controller id=2] New topics: [Set(ReportTopic)], deleted topics: [Set()], new partition replica assignment [Map(ReportTopic-0 -> ReplicaAssignment(replicas=1,0,2, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-04 18:51:51,349] INFO [Controller id=2] New partition creation callback for ReportTopic-0 (kafka.controller.KafkaController)
[2020-04-04 18:51:53,242] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-04-04 18:51:53,243] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-04-04 18:51:53,245] DEBUG [Controller id=2] Preferred replicas by broker Map(1 -> Map(ReportTopic-0 -> Vector(1, 0, 2)), 0 -> Map(BatchTopic-0 -> Vector(0, 1, 2))) (kafka.controller.KafkaController)
[2020-04-04 18:51:53,247] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 Map() (kafka.controller.KafkaController)
[2020-04-04 18:51:53,249] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2020-04-04 18:51:53,249] DEBUG [Controller id=2] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-04-04 18:51:53,249] TRACE [Controller id=2] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-04-04 18:51:53,946] INFO [Controller id=2] New topics: [Set(AlarmTopic)], deleted topics: [Set()], new partition replica assignment [Map(AlarmTopic-0 -> ReplicaAssignment(replicas=0,1,2, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-04 18:51:53,946] INFO [Controller id=2] New partition creation callback for AlarmTopic-0 (kafka.controller.KafkaController)
[2020-04-04 18:55:51,133] DEBUG preRegister called. Server=com.sun.jmx.mbeanserver.JmxMBeanServer@66d3c617, name=log4j:logger=kafka.controller (kafka.controller)
[2020-04-04 18:55:53,210] INFO [ControllerEventThread controllerId=1] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-04-04 18:55:53,279] INFO [Controller id=1] 1 successfully elected as the controller. Epoch incremented to 1 and epoch zk version is now 1 (kafka.controller.KafkaController)
[2020-04-04 18:55:53,280] INFO [Controller id=1] Registering handlers (kafka.controller.KafkaController)
[2020-04-04 18:55:53,299] INFO [Controller id=1] Deleting log dir event notifications (kafka.controller.KafkaController)
[2020-04-04 18:55:53,307] INFO [Controller id=1] Deleting isr change notifications (kafka.controller.KafkaController)
[2020-04-04 18:55:53,311] INFO [Controller id=1] Initializing controller context (kafka.controller.KafkaController)
[2020-04-04 18:55:53,368] INFO [ControllerEventThread controllerId=0] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-04-04 18:55:53,402] DEBUG [Controller id=0] Broker 1 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2020-04-04 18:55:53,412] INFO [ControllerEventThread controllerId=2] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-04-04 18:55:53,435] INFO [Controller id=1] Initialized broker epochs cache: Map(0 -> 58, 1 -> 56, 2 -> 57) (kafka.controller.KafkaController)
[2020-04-04 18:55:53,458] DEBUG [Controller id=2] Broker 1 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2020-04-04 18:55:53,464] DEBUG [Controller id=1] Register BrokerModifications handler for Set(0, 1, 2) (kafka.controller.KafkaController)
[2020-04-04 18:55:53,482] DEBUG [Channel manager on controller 1]: Controller 1 trying to connect to broker 0 (kafka.controller.ControllerChannelManager)
[2020-04-04 18:55:53,531] DEBUG [Channel manager on controller 1]: Controller 1 trying to connect to broker 1 (kafka.controller.ControllerChannelManager)
[2020-04-04 18:55:53,543] DEBUG [Channel manager on controller 1]: Controller 1 trying to connect to broker 2 (kafka.controller.ControllerChannelManager)
[2020-04-04 18:55:53,577] INFO [RequestSendThread controllerId=1] Starting (kafka.controller.RequestSendThread)
[2020-04-04 18:55:53,578] INFO [RequestSendThread controllerId=1] Starting (kafka.controller.RequestSendThread)
[2020-04-04 18:55:53,579] INFO [RequestSendThread controllerId=1] Starting (kafka.controller.RequestSendThread)
[2020-04-04 18:55:53,579] INFO [Controller id=1] Currently active brokers in the cluster: Set(0, 1, 2) (kafka.controller.KafkaController)
[2020-04-04 18:55:53,580] INFO [Controller id=1] Currently shutting brokers in the cluster: Set() (kafka.controller.KafkaController)
[2020-04-04 18:55:53,582] INFO [Controller id=1] Current list of topics in the cluster: Set() (kafka.controller.KafkaController)
[2020-04-04 18:55:53,583] INFO [Controller id=1] Fetching topic deletions in progress (kafka.controller.KafkaController)
[2020-04-04 18:55:53,604] INFO [Controller id=1] List of topics to be deleted:  (kafka.controller.KafkaController)
[2020-04-04 18:55:53,605] INFO [Controller id=1] List of topics ineligible for deletion:  (kafka.controller.KafkaController)
[2020-04-04 18:55:53,620] INFO [Controller id=1] Initializing topic deletion manager (kafka.controller.KafkaController)
[2020-04-04 18:55:53,627] INFO [Topic Deletion Manager 1] Initializing manager with initial deletions: Set(), initial ineligible deletions: Set() (kafka.controller.TopicDeletionManager)
[2020-04-04 18:55:53,628] INFO [Controller id=1] Sending update metadata request (kafka.controller.KafkaController)
[2020-04-04 18:55:53,669] INFO [ReplicaStateMachine controllerId=1] Initializing replica state (kafka.controller.ZkReplicaStateMachine)
[2020-04-04 18:55:53,671] INFO [ReplicaStateMachine controllerId=1] Triggering online replica state changes (kafka.controller.ZkReplicaStateMachine)
[2020-04-04 18:55:53,693] INFO [RequestSendThread controllerId=1] Controller 1 connected to pc:9092 (id: 0 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-04 18:55:53,693] INFO [RequestSendThread controllerId=1] Controller 1 connected to pc:9094 (id: 2 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-04 18:55:53,693] INFO [RequestSendThread controllerId=1] Controller 1 connected to pc:9093 (id: 1 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-04 18:55:53,697] INFO [ReplicaStateMachine controllerId=1] Triggering offline replica state changes (kafka.controller.ZkReplicaStateMachine)
[2020-04-04 18:55:53,698] DEBUG [ReplicaStateMachine controllerId=1] Started replica state machine with initial state -> Map() (kafka.controller.ZkReplicaStateMachine)
[2020-04-04 18:55:53,700] INFO [PartitionStateMachine controllerId=1] Initializing partition state (kafka.controller.ZkPartitionStateMachine)
[2020-04-04 18:55:53,702] INFO [PartitionStateMachine controllerId=1] Triggering online partition state changes (kafka.controller.ZkPartitionStateMachine)
[2020-04-04 18:55:53,720] DEBUG [PartitionStateMachine controllerId=1] Started partition state machine with initial state -> Map() (kafka.controller.ZkPartitionStateMachine)
[2020-04-04 18:55:53,721] INFO [Controller id=1] Ready to serve as the new controller with epoch 1 (kafka.controller.KafkaController)
[2020-04-04 18:55:53,771] INFO [Controller id=1] Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2020-04-04 18:55:53,772] INFO [Controller id=1] Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2020-04-04 18:55:53,773] INFO [Controller id=1] Skipping preferred replica election for partitions due to topic deletion:  (kafka.controller.KafkaController)
[2020-04-04 18:55:53,774] INFO [Controller id=1] Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2020-04-04 18:55:53,781] INFO [Controller id=1] Starting replica leader election (PREFERRED) for partitions  triggered by ZkTriggered (kafka.controller.KafkaController)
[2020-04-04 18:55:53,840] INFO [Controller id=1] Starting the controller scheduler (kafka.controller.KafkaController)
[2020-04-04 18:55:55,050] INFO [Controller id=1] New topics: [Set(BatchTopic)], deleted topics: [Set()], new partition replica assignment [Map(BatchTopic-0 -> ReplicaAssignment(replicas=0,1,2, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-04 18:55:55,052] INFO [Controller id=1] New partition creation callback for BatchTopic-0 (kafka.controller.KafkaController)
[2020-04-04 18:55:58,742] INFO [Controller id=1] New topics: [Set(ReportTopic)], deleted topics: [Set()], new partition replica assignment [Map(ReportTopic-0 -> ReplicaAssignment(replicas=0,2,1, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-04 18:55:58,742] INFO [Controller id=1] New partition creation callback for ReportTopic-0 (kafka.controller.KafkaController)
[2020-04-04 18:55:58,842] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-04-04 18:55:58,842] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-04-04 18:55:58,844] DEBUG [Controller id=1] Preferred replicas by broker Map(0 -> Map(ReportTopic-0 -> Vector(0, 2, 1), BatchTopic-0 -> Vector(0, 1, 2))) (kafka.controller.KafkaController)
[2020-04-04 18:55:58,846] DEBUG [Controller id=1] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-04-04 18:55:58,848] TRACE [Controller id=1] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-04-04 18:56:00,715] INFO [Controller id=1] New topics: [Set(AlarmTopic)], deleted topics: [Set()], new partition replica assignment [Map(AlarmTopic-0 -> ReplicaAssignment(replicas=1,0,2, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-04 18:56:00,715] INFO [Controller id=1] New partition creation callback for AlarmTopic-0 (kafka.controller.KafkaController)
[2020-04-04 18:56:04,080] INFO [Controller id=1] New topics: [Set(__consumer_offsets)], deleted topics: [Set()], new partition replica assignment [Map(__consumer_offsets-22 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-30 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-8 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-21 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-4 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-27 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-7 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-9 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-46 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-25 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-35 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-41 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-33 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-23 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-49 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-47 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-16 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-28 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-31 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-36 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-42 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-3 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-18 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-37 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-15 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-24 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-38 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-17 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-48 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-19 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-11 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-13 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-2 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-43 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-6 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-14 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-20 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-0 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-44 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-39 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-12 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-45 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-1 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-5 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-26 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-29 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-34 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-10 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-32 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-40 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-04 18:56:04,081] INFO [Controller id=1] New partition creation callback for __consumer_offsets-22,__consumer_offsets-30,__consumer_offsets-8,__consumer_offsets-21,__consumer_offsets-4,__consumer_offsets-27,__consumer_offsets-7,__consumer_offsets-9,__consumer_offsets-46,__consumer_offsets-25,__consumer_offsets-35,__consumer_offsets-41,__consumer_offsets-33,__consumer_offsets-23,__consumer_offsets-49,__consumer_offsets-47,__consumer_offsets-16,__consumer_offsets-28,__consumer_offsets-31,__consumer_offsets-36,__consumer_offsets-42,__consumer_offsets-3,__consumer_offsets-18,__consumer_offsets-37,__consumer_offsets-15,__consumer_offsets-24,__consumer_offsets-38,__consumer_offsets-17,__consumer_offsets-48,__consumer_offsets-19,__consumer_offsets-11,__consumer_offsets-13,__consumer_offsets-2,__consumer_offsets-43,__consumer_offsets-6,__consumer_offsets-14,__consumer_offsets-20,__consumer_offsets-0,__consumer_offsets-44,__consumer_offsets-39,__consumer_offsets-12,__consumer_offsets-45,__consumer_offsets-1,__consumer_offsets-5,__consumer_offsets-26,__consumer_offsets-29,__consumer_offsets-34,__consumer_offsets-10,__consumer_offsets-32,__consumer_offsets-40 (kafka.controller.KafkaController)
[2020-04-04 18:57:21,594] DEBUG preRegister called. Server=com.sun.jmx.mbeanserver.JmxMBeanServer@66d3c617, name=log4j:logger=kafka.controller (kafka.controller)
[2020-04-04 18:57:23,941] INFO [ControllerEventThread controllerId=0] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-04-04 18:57:23,992] INFO [Controller id=0] 0 successfully elected as the controller. Epoch incremented to 1 and epoch zk version is now 1 (kafka.controller.KafkaController)
[2020-04-04 18:57:23,992] INFO [Controller id=0] Registering handlers (kafka.controller.KafkaController)
[2020-04-04 18:57:24,005] INFO [Controller id=0] Deleting log dir event notifications (kafka.controller.KafkaController)
[2020-04-04 18:57:24,012] INFO [Controller id=0] Deleting isr change notifications (kafka.controller.KafkaController)
[2020-04-04 18:57:24,015] INFO [Controller id=0] Initializing controller context (kafka.controller.KafkaController)
[2020-04-04 18:57:24,063] INFO [ControllerEventThread controllerId=1] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-04-04 18:57:24,070] INFO [Controller id=0] Initialized broker epochs cache: Map(0 -> 54, 1 -> 55, 2 -> 56) (kafka.controller.KafkaController)
[2020-04-04 18:57:24,075] DEBUG [Controller id=0] Register BrokerModifications handler for Set(0, 1, 2) (kafka.controller.KafkaController)
[2020-04-04 18:57:24,080] DEBUG [Controller id=1] Broker 0 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2020-04-04 18:57:24,082] INFO [ControllerEventThread controllerId=2] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-04-04 18:57:24,086] DEBUG [Channel manager on controller 0]: Controller 0 trying to connect to broker 0 (kafka.controller.ControllerChannelManager)
[2020-04-04 18:57:24,097] DEBUG [Channel manager on controller 0]: Controller 0 trying to connect to broker 1 (kafka.controller.ControllerChannelManager)
[2020-04-04 18:57:24,100] DEBUG [Channel manager on controller 0]: Controller 0 trying to connect to broker 2 (kafka.controller.ControllerChannelManager)
[2020-04-04 18:57:24,105] INFO [RequestSendThread controllerId=0] Starting (kafka.controller.RequestSendThread)
[2020-04-04 18:57:24,105] INFO [RequestSendThread controllerId=0] Starting (kafka.controller.RequestSendThread)
[2020-04-04 18:57:24,106] INFO [Controller id=0] Currently active brokers in the cluster: Set(0, 1, 2) (kafka.controller.KafkaController)
[2020-04-04 18:57:24,106] INFO [Controller id=0] Currently shutting brokers in the cluster: Set() (kafka.controller.KafkaController)
[2020-04-04 18:57:24,107] INFO [RequestSendThread controllerId=0] Starting (kafka.controller.RequestSendThread)
[2020-04-04 18:57:24,108] INFO [Controller id=0] Current list of topics in the cluster: Set() (kafka.controller.KafkaController)
[2020-04-04 18:57:24,111] INFO [Controller id=0] Fetching topic deletions in progress (kafka.controller.KafkaController)
[2020-04-04 18:57:24,116] INFO [Controller id=0] List of topics to be deleted:  (kafka.controller.KafkaController)
[2020-04-04 18:57:24,116] INFO [Controller id=0] List of topics ineligible for deletion:  (kafka.controller.KafkaController)
[2020-04-04 18:57:24,117] INFO [Controller id=0] Initializing topic deletion manager (kafka.controller.KafkaController)
[2020-04-04 18:57:24,117] INFO [Topic Deletion Manager 0] Initializing manager with initial deletions: Set(), initial ineligible deletions: Set() (kafka.controller.TopicDeletionManager)
[2020-04-04 18:57:24,118] INFO [Controller id=0] Sending update metadata request (kafka.controller.KafkaController)
[2020-04-04 18:57:24,123] DEBUG [Controller id=2] Broker 0 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2020-04-04 18:57:24,133] INFO [ReplicaStateMachine controllerId=0] Initializing replica state (kafka.controller.ZkReplicaStateMachine)
[2020-04-04 18:57:24,134] INFO [ReplicaStateMachine controllerId=0] Triggering online replica state changes (kafka.controller.ZkReplicaStateMachine)
[2020-04-04 18:57:24,149] INFO [RequestSendThread controllerId=0] Controller 0 connected to pc:9094 (id: 2 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-04 18:57:24,149] INFO [RequestSendThread controllerId=0] Controller 0 connected to pc:9092 (id: 0 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-04 18:57:24,150] INFO [ReplicaStateMachine controllerId=0] Triggering offline replica state changes (kafka.controller.ZkReplicaStateMachine)
[2020-04-04 18:57:24,151] DEBUG [ReplicaStateMachine controllerId=0] Started replica state machine with initial state -> Map() (kafka.controller.ZkReplicaStateMachine)
[2020-04-04 18:57:24,152] INFO [PartitionStateMachine controllerId=0] Initializing partition state (kafka.controller.ZkPartitionStateMachine)
[2020-04-04 18:57:24,153] INFO [PartitionStateMachine controllerId=0] Triggering online partition state changes (kafka.controller.ZkPartitionStateMachine)
[2020-04-04 18:57:24,155] INFO [RequestSendThread controllerId=0] Controller 0 connected to pc:9093 (id: 1 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-04 18:57:24,160] DEBUG [PartitionStateMachine controllerId=0] Started partition state machine with initial state -> Map() (kafka.controller.ZkPartitionStateMachine)
[2020-04-04 18:57:24,160] INFO [Controller id=0] Ready to serve as the new controller with epoch 1 (kafka.controller.KafkaController)
[2020-04-04 18:57:24,169] INFO [Controller id=0] Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2020-04-04 18:57:24,170] INFO [Controller id=0] Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2020-04-04 18:57:24,170] INFO [Controller id=0] Skipping preferred replica election for partitions due to topic deletion:  (kafka.controller.KafkaController)
[2020-04-04 18:57:24,170] INFO [Controller id=0] Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2020-04-04 18:57:24,172] INFO [Controller id=0] Starting replica leader election (PREFERRED) for partitions  triggered by ZkTriggered (kafka.controller.KafkaController)
[2020-04-04 18:57:24,189] INFO [Controller id=0] Starting the controller scheduler (kafka.controller.KafkaController)
[2020-04-04 18:57:24,660] INFO [Controller id=0] New topics: [Set(BatchTopic)], deleted topics: [Set()], new partition replica assignment [Map(BatchTopic-0 -> ReplicaAssignment(replicas=2,1,0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-04 18:57:24,661] INFO [Controller id=0] New partition creation callback for BatchTopic-0 (kafka.controller.KafkaController)
[2020-04-04 18:57:27,911] INFO [Controller id=0] New topics: [Set(ReportTopic)], deleted topics: [Set()], new partition replica assignment [Map(ReportTopic-0 -> ReplicaAssignment(replicas=1,0,2, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-04 18:57:27,911] INFO [Controller id=0] New partition creation callback for ReportTopic-0 (kafka.controller.KafkaController)
[2020-04-04 18:57:29,191] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-04-04 18:57:29,191] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-04-04 18:57:29,193] DEBUG [Controller id=0] Preferred replicas by broker Map(2 -> Map(BatchTopic-0 -> Vector(2, 1, 0)), 1 -> Map(ReportTopic-0 -> Vector(1, 0, 2))) (kafka.controller.KafkaController)
[2020-04-04 18:57:29,194] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 Map() (kafka.controller.KafkaController)
[2020-04-04 18:57:29,195] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2020-04-04 18:57:29,196] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 Map() (kafka.controller.KafkaController)
[2020-04-04 18:57:29,196] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2020-04-04 18:57:30,205] INFO [Controller id=0] New topics: [Set(AlarmTopic)], deleted topics: [Set()], new partition replica assignment [Map(AlarmTopic-0 -> ReplicaAssignment(replicas=2,0,1, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-04 18:57:30,205] INFO [Controller id=0] New partition creation callback for AlarmTopic-0 (kafka.controller.KafkaController)
[2020-04-04 18:57:33,187] INFO [Controller id=0] New topics: [Set(__consumer_offsets)], deleted topics: [Set()], new partition replica assignment [Map(__consumer_offsets-22 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-30 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-8 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-21 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-4 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-27 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-7 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-9 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-46 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-25 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-35 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-41 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-33 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-23 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-49 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-47 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-16 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-28 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-31 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-36 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-42 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-3 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-18 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-37 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-15 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-24 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-38 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-17 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-48 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-19 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-11 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-13 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-2 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-43 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-6 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-14 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-20 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-0 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-44 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-39 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-12 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-45 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-1 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-5 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-26 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-29 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-34 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-10 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-32 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-40 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-04 18:57:33,188] INFO [Controller id=0] New partition creation callback for __consumer_offsets-22,__consumer_offsets-30,__consumer_offsets-8,__consumer_offsets-21,__consumer_offsets-4,__consumer_offsets-27,__consumer_offsets-7,__consumer_offsets-9,__consumer_offsets-46,__consumer_offsets-25,__consumer_offsets-35,__consumer_offsets-41,__consumer_offsets-33,__consumer_offsets-23,__consumer_offsets-49,__consumer_offsets-47,__consumer_offsets-16,__consumer_offsets-28,__consumer_offsets-31,__consumer_offsets-36,__consumer_offsets-42,__consumer_offsets-3,__consumer_offsets-18,__consumer_offsets-37,__consumer_offsets-15,__consumer_offsets-24,__consumer_offsets-38,__consumer_offsets-17,__consumer_offsets-48,__consumer_offsets-19,__consumer_offsets-11,__consumer_offsets-13,__consumer_offsets-2,__consumer_offsets-43,__consumer_offsets-6,__consumer_offsets-14,__consumer_offsets-20,__consumer_offsets-0,__consumer_offsets-44,__consumer_offsets-39,__consumer_offsets-12,__consumer_offsets-45,__consumer_offsets-1,__consumer_offsets-5,__consumer_offsets-26,__consumer_offsets-29,__consumer_offsets-34,__consumer_offsets-10,__consumer_offsets-32,__consumer_offsets-40 (kafka.controller.KafkaController)
[2020-04-04 18:59:24,905] DEBUG preRegister called. Server=com.sun.jmx.mbeanserver.JmxMBeanServer@66d3c617, name=log4j:logger=kafka.controller (kafka.controller)
[2020-04-04 18:59:26,980] INFO [ControllerEventThread controllerId=0] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-04-04 18:59:26,993] INFO [ControllerEventThread controllerId=1] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-04-04 18:59:27,010] INFO [ControllerEventThread controllerId=2] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-04-04 18:59:27,025] INFO [Controller id=0] 0 successfully elected as the controller. Epoch incremented to 1 and epoch zk version is now 1 (kafka.controller.KafkaController)
[2020-04-04 18:59:27,025] INFO [Controller id=0] Registering handlers (kafka.controller.KafkaController)
[2020-04-04 18:59:27,032] INFO [Controller id=0] Deleting log dir event notifications (kafka.controller.KafkaController)
[2020-04-04 18:59:27,038] INFO [Controller id=0] Deleting isr change notifications (kafka.controller.KafkaController)
[2020-04-04 18:59:27,044] INFO [Controller id=0] Initializing controller context (kafka.controller.KafkaController)
[2020-04-04 18:59:27,047] DEBUG [Controller id=2] Broker 0 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2020-04-04 18:59:27,075] INFO [Controller id=0] Initialized broker epochs cache: Map(0 -> 66, 1 -> 67, 2 -> 68) (kafka.controller.KafkaController)
[2020-04-04 18:59:27,082] DEBUG [Controller id=0] Register BrokerModifications handler for Set(0, 1, 2) (kafka.controller.KafkaController)
[2020-04-04 18:59:27,083] DEBUG [Controller id=1] Broker 0 was elected as controller instead of broker 1 (kafka.controller.KafkaController)
org.apache.kafka.common.errors.ControllerMovedException: Controller moved to another broker. Aborting controller startup procedure
[2020-04-04 18:59:27,095] DEBUG [Channel manager on controller 0]: Controller 0 trying to connect to broker 0 (kafka.controller.ControllerChannelManager)
[2020-04-04 18:59:27,110] DEBUG [Channel manager on controller 0]: Controller 0 trying to connect to broker 1 (kafka.controller.ControllerChannelManager)
[2020-04-04 18:59:27,114] DEBUG [Channel manager on controller 0]: Controller 0 trying to connect to broker 2 (kafka.controller.ControllerChannelManager)
[2020-04-04 18:59:27,127] INFO [RequestSendThread controllerId=0] Starting (kafka.controller.RequestSendThread)
[2020-04-04 18:59:27,133] INFO [RequestSendThread controllerId=0] Starting (kafka.controller.RequestSendThread)
[2020-04-04 18:59:27,133] INFO [RequestSendThread controllerId=0] Starting (kafka.controller.RequestSendThread)
[2020-04-04 18:59:27,134] INFO [Controller id=0] Currently active brokers in the cluster: Set(0, 1, 2) (kafka.controller.KafkaController)
[2020-04-04 18:59:27,134] INFO [Controller id=0] Currently shutting brokers in the cluster: Set() (kafka.controller.KafkaController)
[2020-04-04 18:59:27,135] INFO [Controller id=0] Current list of topics in the cluster: Set() (kafka.controller.KafkaController)
[2020-04-04 18:59:27,135] INFO [Controller id=0] Fetching topic deletions in progress (kafka.controller.KafkaController)
[2020-04-04 18:59:27,138] INFO [Controller id=0] List of topics to be deleted:  (kafka.controller.KafkaController)
[2020-04-04 18:59:27,138] INFO [Controller id=0] List of topics ineligible for deletion:  (kafka.controller.KafkaController)
[2020-04-04 18:59:27,139] INFO [Controller id=0] Initializing topic deletion manager (kafka.controller.KafkaController)
[2020-04-04 18:59:27,139] INFO [Topic Deletion Manager 0] Initializing manager with initial deletions: Set(), initial ineligible deletions: Set() (kafka.controller.TopicDeletionManager)
[2020-04-04 18:59:27,141] INFO [Controller id=0] Sending update metadata request (kafka.controller.KafkaController)
[2020-04-04 18:59:27,173] INFO [ReplicaStateMachine controllerId=0] Initializing replica state (kafka.controller.ZkReplicaStateMachine)
[2020-04-04 18:59:27,174] INFO [ReplicaStateMachine controllerId=0] Triggering online replica state changes (kafka.controller.ZkReplicaStateMachine)
[2020-04-04 18:59:27,182] INFO [RequestSendThread controllerId=0] Controller 0 connected to pc:9094 (id: 2 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-04 18:59:27,182] INFO [RequestSendThread controllerId=0] Controller 0 connected to pc:9093 (id: 1 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-04 18:59:27,182] INFO [RequestSendThread controllerId=0] Controller 0 connected to pc:9092 (id: 0 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-04 18:59:27,183] INFO [ReplicaStateMachine controllerId=0] Triggering offline replica state changes (kafka.controller.ZkReplicaStateMachine)
[2020-04-04 18:59:27,183] DEBUG [ReplicaStateMachine controllerId=0] Started replica state machine with initial state -> Map() (kafka.controller.ZkReplicaStateMachine)
[2020-04-04 18:59:27,184] INFO [PartitionStateMachine controllerId=0] Initializing partition state (kafka.controller.ZkPartitionStateMachine)
[2020-04-04 18:59:27,185] INFO [PartitionStateMachine controllerId=0] Triggering online partition state changes (kafka.controller.ZkPartitionStateMachine)
[2020-04-04 18:59:27,191] DEBUG [PartitionStateMachine controllerId=0] Started partition state machine with initial state -> Map() (kafka.controller.ZkPartitionStateMachine)
[2020-04-04 18:59:27,191] INFO [Controller id=0] Ready to serve as the new controller with epoch 1 (kafka.controller.KafkaController)
[2020-04-04 18:59:27,198] INFO [Controller id=0] Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2020-04-04 18:59:27,198] INFO [Controller id=0] Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2020-04-04 18:59:27,199] INFO [Controller id=0] Skipping preferred replica election for partitions due to topic deletion:  (kafka.controller.KafkaController)
[2020-04-04 18:59:27,199] INFO [Controller id=0] Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2020-04-04 18:59:27,200] INFO [Controller id=0] Starting replica leader election (PREFERRED) for partitions  triggered by ZkTriggered (kafka.controller.KafkaController)
[2020-04-04 18:59:27,215] INFO [Controller id=0] Starting the controller scheduler (kafka.controller.KafkaController)
[2020-04-04 18:59:27,759] INFO [Controller id=0] New topics: [Set(BatchTopic)], deleted topics: [Set()], new partition replica assignment [Map(BatchTopic-0 -> ReplicaAssignment(replicas=0,2,1, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-04 18:59:27,760] INFO [Controller id=0] New partition creation callback for BatchTopic-0 (kafka.controller.KafkaController)
[2020-04-04 18:59:30,117] INFO [Controller id=0] New topics: [Set(ReportTopic)], deleted topics: [Set()], new partition replica assignment [Map(ReportTopic-0 -> ReplicaAssignment(replicas=1,0,2, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-04 18:59:30,117] INFO [Controller id=0] New partition creation callback for ReportTopic-0 (kafka.controller.KafkaController)
[2020-04-04 18:59:31,998] INFO [Controller id=0] New topics: [Set(AlarmTopic)], deleted topics: [Set()], new partition replica assignment [Map(AlarmTopic-0 -> ReplicaAssignment(replicas=2,1,0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-04 18:59:31,999] INFO [Controller id=0] New partition creation callback for AlarmTopic-0 (kafka.controller.KafkaController)
[2020-04-04 18:59:32,216] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-04-04 18:59:32,216] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-04-04 18:59:32,218] DEBUG [Controller id=0] Preferred replicas by broker Map(2 -> Map(AlarmTopic-0 -> Vector(2, 1, 0)), 1 -> Map(ReportTopic-0 -> Vector(1, 0, 2)), 0 -> Map(BatchTopic-0 -> Vector(0, 2, 1))) (kafka.controller.KafkaController)
[2020-04-04 18:59:32,219] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 Map() (kafka.controller.KafkaController)
[2020-04-04 18:59:32,220] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2020-04-04 18:59:32,220] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 Map() (kafka.controller.KafkaController)
[2020-04-04 18:59:32,220] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2020-04-04 18:59:32,221] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-04-04 18:59:32,221] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-04-04 18:59:34,801] INFO [Controller id=0] New topics: [Set(__consumer_offsets)], deleted topics: [Set()], new partition replica assignment [Map(__consumer_offsets-22 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-30 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-8 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-21 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-4 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-27 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-7 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-9 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-46 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-25 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-35 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-41 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-33 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-23 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-49 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-47 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-16 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-28 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-31 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-36 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-42 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-3 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-18 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-37 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-15 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-24 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-38 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-17 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-48 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-19 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-11 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-13 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-2 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-43 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-6 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-14 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-20 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-0 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-44 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-39 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-12 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-45 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-1 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-5 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-26 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-29 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-34 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-10 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-32 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-40 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-04 18:59:34,801] INFO [Controller id=0] New partition creation callback for __consumer_offsets-22,__consumer_offsets-30,__consumer_offsets-8,__consumer_offsets-21,__consumer_offsets-4,__consumer_offsets-27,__consumer_offsets-7,__consumer_offsets-9,__consumer_offsets-46,__consumer_offsets-25,__consumer_offsets-35,__consumer_offsets-41,__consumer_offsets-33,__consumer_offsets-23,__consumer_offsets-49,__consumer_offsets-47,__consumer_offsets-16,__consumer_offsets-28,__consumer_offsets-31,__consumer_offsets-36,__consumer_offsets-42,__consumer_offsets-3,__consumer_offsets-18,__consumer_offsets-37,__consumer_offsets-15,__consumer_offsets-24,__consumer_offsets-38,__consumer_offsets-17,__consumer_offsets-48,__consumer_offsets-19,__consumer_offsets-11,__consumer_offsets-13,__consumer_offsets-2,__consumer_offsets-43,__consumer_offsets-6,__consumer_offsets-14,__consumer_offsets-20,__consumer_offsets-0,__consumer_offsets-44,__consumer_offsets-39,__consumer_offsets-12,__consumer_offsets-45,__consumer_offsets-1,__consumer_offsets-5,__consumer_offsets-26,__consumer_offsets-29,__consumer_offsets-34,__consumer_offsets-10,__consumer_offsets-32,__consumer_offsets-40 (kafka.controller.KafkaController)
>>>>>>> 656001b6cbebb4633e2c938e791b0a95fe84fa62
