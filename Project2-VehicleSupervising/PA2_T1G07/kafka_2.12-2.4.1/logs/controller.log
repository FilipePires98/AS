<<<<<<< HEAD
[2020-04-15 16:07:44,762] INFO [ControllerEventThread controllerId=1] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-04-15 16:07:44,886] DEBUG [Controller id=1] Broker 2 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2020-04-15 16:10:24,801] DEBUG preRegister called. Server=com.sun.jmx.mbeanserver.JmxMBeanServer@66d3c617, name=log4j:logger=kafka.controller (kafka.controller)
[2020-04-15 16:10:28,292] INFO [ControllerEventThread controllerId=2] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-04-15 16:10:28,333] INFO [ControllerEventThread controllerId=0] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-04-15 16:10:28,440] INFO [Controller id=2] 2 successfully elected as the controller. Epoch incremented to 1 and epoch zk version is now 1 (kafka.controller.KafkaController)
[2020-04-15 16:10:28,442] INFO [Controller id=2] Registering handlers (kafka.controller.KafkaController)
[2020-04-15 16:10:28,455] INFO [Controller id=2] Deleting log dir event notifications (kafka.controller.KafkaController)
[2020-04-15 16:10:28,470] INFO [Controller id=2] Deleting isr change notifications (kafka.controller.KafkaController)
[2020-04-15 16:10:28,478] INFO [Controller id=2] Initializing controller context (kafka.controller.KafkaController)
[2020-04-15 16:10:28,482] DEBUG [Controller id=0] Broker 2 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2020-04-15 16:10:28,502] INFO [ControllerEventThread controllerId=1] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-04-15 16:10:28,582] DEBUG [Controller id=1] Broker 2 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2020-04-15 16:10:28,618] INFO [Controller id=2] Initialized broker epochs cache: Map(0 -> 63, 1 -> 64, 2 -> 62) (kafka.controller.KafkaController)
[2020-04-15 16:10:28,634] DEBUG [Controller id=2] Register BrokerModifications handler for Set(0, 1, 2) (kafka.controller.KafkaController)
[2020-04-15 16:10:28,661] DEBUG [Channel manager on controller 2]: Controller 2 trying to connect to broker 0 (kafka.controller.ControllerChannelManager)
[2020-04-15 16:10:28,699] DEBUG [Channel manager on controller 2]: Controller 2 trying to connect to broker 1 (kafka.controller.ControllerChannelManager)
[2020-04-15 16:10:28,715] DEBUG [Channel manager on controller 2]: Controller 2 trying to connect to broker 2 (kafka.controller.ControllerChannelManager)
[2020-04-15 16:10:28,752] INFO [Controller id=2] Currently active brokers in the cluster: Set(0, 1, 2) (kafka.controller.KafkaController)
[2020-04-15 16:10:28,754] INFO [Controller id=2] Currently shutting brokers in the cluster: Set() (kafka.controller.KafkaController)
[2020-04-15 16:10:28,755] INFO [Controller id=2] Current list of topics in the cluster: Set() (kafka.controller.KafkaController)
[2020-04-15 16:10:28,757] INFO [Controller id=2] Fetching topic deletions in progress (kafka.controller.KafkaController)
[2020-04-15 16:10:28,757] INFO [RequestSendThread controllerId=2] Starting (kafka.controller.RequestSendThread)
[2020-04-15 16:10:28,757] INFO [RequestSendThread controllerId=2] Starting (kafka.controller.RequestSendThread)
[2020-04-15 16:10:28,757] INFO [RequestSendThread controllerId=2] Starting (kafka.controller.RequestSendThread)
[2020-04-15 16:10:28,765] INFO [Controller id=2] List of topics to be deleted:  (kafka.controller.KafkaController)
[2020-04-15 16:10:28,767] INFO [Controller id=2] List of topics ineligible for deletion:  (kafka.controller.KafkaController)
[2020-04-15 16:10:28,769] INFO [Controller id=2] Initializing topic deletion manager (kafka.controller.KafkaController)
[2020-04-15 16:10:28,771] INFO [Topic Deletion Manager 2] Initializing manager with initial deletions: Set(), initial ineligible deletions: Set() (kafka.controller.TopicDeletionManager)
[2020-04-15 16:10:28,775] INFO [Controller id=2] Sending update metadata request (kafka.controller.KafkaController)
[2020-04-15 16:10:28,907] INFO [ReplicaStateMachine controllerId=2] Initializing replica state (kafka.controller.ZkReplicaStateMachine)
[2020-04-15 16:10:28,910] INFO [ReplicaStateMachine controllerId=2] Triggering online replica state changes (kafka.controller.ZkReplicaStateMachine)
[2020-04-15 16:10:28,923] INFO [RequestSendThread controllerId=2] Controller 2 connected to pc:9094 (id: 2 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-15 16:10:28,927] INFO [RequestSendThread controllerId=2] Controller 2 connected to pc:9092 (id: 0 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-15 16:10:28,930] INFO [RequestSendThread controllerId=2] Controller 2 connected to pc:9093 (id: 1 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-15 16:10:28,986] INFO [ReplicaStateMachine controllerId=2] Triggering offline replica state changes (kafka.controller.ZkReplicaStateMachine)
[2020-04-15 16:10:28,988] DEBUG [ReplicaStateMachine controllerId=2] Started replica state machine with initial state -> Map() (kafka.controller.ZkReplicaStateMachine)
[2020-04-15 16:10:28,990] INFO [PartitionStateMachine controllerId=2] Initializing partition state (kafka.controller.ZkPartitionStateMachine)
[2020-04-15 16:10:29,034] INFO [PartitionStateMachine controllerId=2] Triggering online partition state changes (kafka.controller.ZkPartitionStateMachine)
[2020-04-15 16:10:29,061] DEBUG [PartitionStateMachine controllerId=2] Started partition state machine with initial state -> Map() (kafka.controller.ZkPartitionStateMachine)
[2020-04-15 16:10:29,063] INFO [Controller id=2] Ready to serve as the new controller with epoch 1 (kafka.controller.KafkaController)
[2020-04-15 16:10:29,092] INFO [Controller id=2] Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2020-04-15 16:10:29,093] INFO [Controller id=2] Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2020-04-15 16:10:29,096] INFO [Controller id=2] Skipping preferred replica election for partitions due to topic deletion:  (kafka.controller.KafkaController)
[2020-04-15 16:10:29,098] INFO [Controller id=2] Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2020-04-15 16:10:29,103] INFO [Controller id=2] Starting replica leader election (PREFERRED) for partitions  triggered by ZkTriggered (kafka.controller.KafkaController)
[2020-04-15 16:10:29,170] INFO [Controller id=2] Starting the controller scheduler (kafka.controller.KafkaController)
[2020-04-15 16:10:30,563] INFO [Controller id=2] New topics: [Set(BatchTopic)], deleted topics: [Set()], new partition replica assignment [Map(BatchTopic-2 -> ReplicaAssignment(replicas=1,2,0, addingReplicas=, removingReplicas=), BatchTopic-1 -> ReplicaAssignment(replicas=2,0,1, addingReplicas=, removingReplicas=), BatchTopic-0 -> ReplicaAssignment(replicas=0,1,2, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-15 16:10:30,564] INFO [Controller id=2] New partition creation callback for BatchTopic-2,BatchTopic-1,BatchTopic-0 (kafka.controller.KafkaController)
[2020-04-15 16:10:34,173] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-04-15 16:10:34,173] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-04-15 16:10:34,177] DEBUG [Controller id=2] Preferred replicas by broker Map(2 -> Map(BatchTopic-1 -> Vector(2, 0, 1)), 1 -> Map(BatchTopic-2 -> Vector(1, 2, 0)), 0 -> Map(BatchTopic-0 -> Vector(0, 1, 2))) (kafka.controller.KafkaController)
[2020-04-15 16:10:34,180] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 Map() (kafka.controller.KafkaController)
[2020-04-15 16:10:34,182] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2020-04-15 16:10:34,183] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 Map() (kafka.controller.KafkaController)
[2020-04-15 16:10:34,183] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2020-04-15 16:10:34,183] DEBUG [Controller id=2] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-04-15 16:10:34,183] TRACE [Controller id=2] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-04-15 16:10:35,942] INFO [Controller id=2] New topics: [Set(ReportTopic)], deleted topics: [Set()], new partition replica assignment [Map(ReportTopic-2 -> ReplicaAssignment(replicas=0,2,1, addingReplicas=, removingReplicas=), ReportTopic-1 -> ReplicaAssignment(replicas=1,0,2, addingReplicas=, removingReplicas=), ReportTopic-0 -> ReplicaAssignment(replicas=2,1,0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-15 16:10:35,942] INFO [Controller id=2] New partition creation callback for ReportTopic-2,ReportTopic-1,ReportTopic-0 (kafka.controller.KafkaController)
[2020-04-15 16:10:38,654] INFO [Controller id=2] New topics: [Set(AlarmTopic)], deleted topics: [Set()], new partition replica assignment [Map(AlarmTopic-2 -> ReplicaAssignment(replicas=1,0,2, addingReplicas=, removingReplicas=), AlarmTopic-1 -> ReplicaAssignment(replicas=2,1,0, addingReplicas=, removingReplicas=), AlarmTopic-0 -> ReplicaAssignment(replicas=0,2,1, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-15 16:10:38,654] INFO [Controller id=2] New partition creation callback for AlarmTopic-2,AlarmTopic-1,AlarmTopic-0 (kafka.controller.KafkaController)
[2020-04-15 16:10:44,142] INFO [Controller id=2] New topics: [Set(__consumer_offsets)], deleted topics: [Set()], new partition replica assignment [Map(__consumer_offsets-22 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-30 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-8 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-21 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-4 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-27 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-7 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-9 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-46 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-25 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-35 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-41 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-33 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-23 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-49 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-47 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-16 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-28 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-31 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-36 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-42 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-3 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-18 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-37 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-15 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-24 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-38 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-17 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-48 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-19 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-11 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-13 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-2 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-43 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-6 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-14 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-20 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-0 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-44 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-39 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-12 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-45 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-1 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-5 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-26 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-29 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-34 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-10 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-32 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-40 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-15 16:10:44,143] INFO [Controller id=2] New partition creation callback for __consumer_offsets-22,__consumer_offsets-30,__consumer_offsets-8,__consumer_offsets-21,__consumer_offsets-4,__consumer_offsets-27,__consumer_offsets-7,__consumer_offsets-9,__consumer_offsets-46,__consumer_offsets-25,__consumer_offsets-35,__consumer_offsets-41,__consumer_offsets-33,__consumer_offsets-23,__consumer_offsets-49,__consumer_offsets-47,__consumer_offsets-16,__consumer_offsets-28,__consumer_offsets-31,__consumer_offsets-36,__consumer_offsets-42,__consumer_offsets-3,__consumer_offsets-18,__consumer_offsets-37,__consumer_offsets-15,__consumer_offsets-24,__consumer_offsets-38,__consumer_offsets-17,__consumer_offsets-48,__consumer_offsets-19,__consumer_offsets-11,__consumer_offsets-13,__consumer_offsets-2,__consumer_offsets-43,__consumer_offsets-6,__consumer_offsets-14,__consumer_offsets-20,__consumer_offsets-0,__consumer_offsets-44,__consumer_offsets-39,__consumer_offsets-12,__consumer_offsets-45,__consumer_offsets-1,__consumer_offsets-5,__consumer_offsets-26,__consumer_offsets-29,__consumer_offsets-34,__consumer_offsets-10,__consumer_offsets-32,__consumer_offsets-40 (kafka.controller.KafkaController)
=======
[2020-04-13 23:11:01,630] INFO [ControllerEventThread controllerId=0] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-04-13 23:11:01,680] INFO [Controller id=0] 0 successfully elected as the controller. Epoch incremented to 1 and epoch zk version is now 1 (kafka.controller.KafkaController)
[2020-04-13 23:11:01,681] INFO [Controller id=0] Registering handlers (kafka.controller.KafkaController)
[2020-04-13 23:11:01,689] INFO [Controller id=0] Deleting log dir event notifications (kafka.controller.KafkaController)
[2020-04-13 23:11:01,697] INFO [Controller id=0] Deleting isr change notifications (kafka.controller.KafkaController)
[2020-04-13 23:11:01,704] INFO [Controller id=0] Initializing controller context (kafka.controller.KafkaController)
[2020-04-13 23:11:01,803] INFO [Controller id=0] Initialized broker epochs cache: Map(0 -> 62, 1 -> 63, 2 -> 64) (kafka.controller.KafkaController)
[2020-04-13 23:11:01,812] DEBUG [Controller id=0] Register BrokerModifications handler for Set(0, 1, 2) (kafka.controller.KafkaController)
[2020-04-13 23:11:01,840] DEBUG [Channel manager on controller 0]: Controller 0 trying to connect to broker 0 (kafka.controller.ControllerChannelManager)
[2020-04-13 23:11:01,874] DEBUG [Channel manager on controller 0]: Controller 0 trying to connect to broker 1 (kafka.controller.ControllerChannelManager)
[2020-04-13 23:11:01,885] DEBUG [Channel manager on controller 0]: Controller 0 trying to connect to broker 2 (kafka.controller.ControllerChannelManager)
[2020-04-13 23:11:01,901] INFO [RequestSendThread controllerId=0] Starting (kafka.controller.RequestSendThread)
[2020-04-13 23:11:01,917] INFO [RequestSendThread controllerId=0] Starting (kafka.controller.RequestSendThread)
[2020-04-13 23:11:01,920] INFO [Controller id=0] Currently active brokers in the cluster: Set(0, 1, 2) (kafka.controller.KafkaController)
[2020-04-13 23:11:01,921] INFO [RequestSendThread controllerId=0] Starting (kafka.controller.RequestSendThread)
[2020-04-13 23:11:01,925] INFO [Controller id=0] Currently shutting brokers in the cluster: Set() (kafka.controller.KafkaController)
[2020-04-13 23:11:01,926] INFO [Controller id=0] Current list of topics in the cluster: Set() (kafka.controller.KafkaController)
[2020-04-13 23:11:01,927] INFO [Controller id=0] Fetching topic deletions in progress (kafka.controller.KafkaController)
[2020-04-13 23:11:01,946] INFO [Controller id=0] List of topics to be deleted:  (kafka.controller.KafkaController)
[2020-04-13 23:11:01,947] INFO [Controller id=0] List of topics ineligible for deletion:  (kafka.controller.KafkaController)
[2020-04-13 23:11:01,948] INFO [Controller id=0] Initializing topic deletion manager (kafka.controller.KafkaController)
[2020-04-13 23:11:01,950] INFO [Topic Deletion Manager 0] Initializing manager with initial deletions: Set(), initial ineligible deletions: Set() (kafka.controller.TopicDeletionManager)
[2020-04-13 23:11:01,951] INFO [Controller id=0] Sending update metadata request (kafka.controller.KafkaController)
[2020-04-13 23:11:01,988] INFO [ReplicaStateMachine controllerId=0] Initializing replica state (kafka.controller.ZkReplicaStateMachine)
[2020-04-13 23:11:01,990] INFO [ReplicaStateMachine controllerId=0] Triggering online replica state changes (kafka.controller.ZkReplicaStateMachine)
[2020-04-13 23:11:02,013] INFO [RequestSendThread controllerId=0] Controller 0 connected to pc:9094 (id: 2 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-13 23:11:02,013] INFO [RequestSendThread controllerId=0] Controller 0 connected to pc:9092 (id: 0 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-13 23:11:02,015] INFO [RequestSendThread controllerId=0] Controller 0 connected to pc:9093 (id: 1 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-13 23:11:02,029] INFO [ReplicaStateMachine controllerId=0] Triggering offline replica state changes (kafka.controller.ZkReplicaStateMachine)
[2020-04-13 23:11:02,030] DEBUG [ReplicaStateMachine controllerId=0] Started replica state machine with initial state -> Map() (kafka.controller.ZkReplicaStateMachine)
[2020-04-13 23:11:02,031] INFO [PartitionStateMachine controllerId=0] Initializing partition state (kafka.controller.ZkPartitionStateMachine)
[2020-04-13 23:11:02,034] INFO [PartitionStateMachine controllerId=0] Triggering online partition state changes (kafka.controller.ZkPartitionStateMachine)
[2020-04-13 23:11:02,047] DEBUG [PartitionStateMachine controllerId=0] Started partition state machine with initial state -> Map() (kafka.controller.ZkPartitionStateMachine)
[2020-04-13 23:11:02,049] INFO [Controller id=0] Ready to serve as the new controller with epoch 1 (kafka.controller.KafkaController)
[2020-04-13 23:11:02,062] INFO [Controller id=0] Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2020-04-13 23:11:02,063] INFO [Controller id=0] Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2020-04-13 23:11:02,064] INFO [Controller id=0] Skipping preferred replica election for partitions due to topic deletion:  (kafka.controller.KafkaController)
[2020-04-13 23:11:02,065] INFO [Controller id=0] Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2020-04-13 23:11:02,069] INFO [Controller id=0] Starting replica leader election (PREFERRED) for partitions  triggered by ZkTriggered (kafka.controller.KafkaController)
[2020-04-13 23:11:02,115] INFO [Controller id=0] Starting the controller scheduler (kafka.controller.KafkaController)
[2020-04-13 23:11:03,351] INFO [Controller id=0] New topics: [Set(BatchTopic)], deleted topics: [Set()], new partition replica assignment [Map(BatchTopic-2 -> ReplicaAssignment(replicas=2,0,1, addingReplicas=, removingReplicas=), BatchTopic-1 -> ReplicaAssignment(replicas=0,1,2, addingReplicas=, removingReplicas=), BatchTopic-0 -> ReplicaAssignment(replicas=1,2,0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-13 23:11:03,365] INFO [Controller id=0] New partition creation callback for BatchTopic-2,BatchTopic-1,BatchTopic-0 (kafka.controller.KafkaController)
[2020-04-13 23:11:06,647] INFO [Controller id=0] New topics: [Set(ReportTopic)], deleted topics: [Set()], new partition replica assignment [Map(ReportTopic-2 -> ReplicaAssignment(replicas=1,0,2, addingReplicas=, removingReplicas=), ReportTopic-1 -> ReplicaAssignment(replicas=2,1,0, addingReplicas=, removingReplicas=), ReportTopic-0 -> ReplicaAssignment(replicas=0,2,1, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-13 23:11:06,647] INFO [Controller id=0] New partition creation callback for ReportTopic-2,ReportTopic-1,ReportTopic-0 (kafka.controller.KafkaController)
[2020-04-13 23:11:07,118] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-04-13 23:11:07,119] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-04-13 23:11:07,128] DEBUG [Controller id=0] Preferred replicas by broker Map(2 -> Map(BatchTopic-2 -> Vector(2, 0, 1), ReportTopic-1 -> Vector(2, 1, 0)), 1 -> Map(ReportTopic-2 -> Vector(1, 0, 2), BatchTopic-0 -> Vector(1, 2, 0)), 0 -> Map(ReportTopic-0 -> Vector(0, 2, 1), BatchTopic-1 -> Vector(0, 1, 2))) (kafka.controller.KafkaController)
[2020-04-13 23:11:07,132] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 Map() (kafka.controller.KafkaController)
[2020-04-13 23:11:07,137] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2020-04-13 23:11:07,137] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 Map() (kafka.controller.KafkaController)
[2020-04-13 23:11:07,138] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2020-04-13 23:11:07,138] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-04-13 23:11:07,138] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-04-13 23:11:08,692] INFO [Controller id=0] New topics: [Set(AlarmTopic)], deleted topics: [Set()], new partition replica assignment [Map(AlarmTopic-2 -> ReplicaAssignment(replicas=0,2,1, addingReplicas=, removingReplicas=), AlarmTopic-1 -> ReplicaAssignment(replicas=1,0,2, addingReplicas=, removingReplicas=), AlarmTopic-0 -> ReplicaAssignment(replicas=2,1,0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-13 23:11:08,692] INFO [Controller id=0] New partition creation callback for AlarmTopic-2,AlarmTopic-1,AlarmTopic-0 (kafka.controller.KafkaController)
[2020-04-13 23:11:12,360] INFO [Controller id=0] New topics: [Set(__consumer_offsets)], deleted topics: [Set()], new partition replica assignment [Map(__consumer_offsets-22 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-30 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-8 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-21 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-4 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-27 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-7 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-9 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-46 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-25 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-35 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-41 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-33 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-23 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-49 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-47 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-16 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-28 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-31 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-36 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-42 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-3 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-18 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-37 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-15 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-24 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-38 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-17 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-48 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-19 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-11 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-13 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-2 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-43 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-6 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-14 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-20 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-0 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-44 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-39 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-12 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-45 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-1 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-5 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-26 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-29 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-34 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-10 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-32 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-40 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-13 23:11:12,360] INFO [Controller id=0] New partition creation callback for __consumer_offsets-22,__consumer_offsets-30,__consumer_offsets-8,__consumer_offsets-21,__consumer_offsets-4,__consumer_offsets-27,__consumer_offsets-7,__consumer_offsets-9,__consumer_offsets-46,__consumer_offsets-25,__consumer_offsets-35,__consumer_offsets-41,__consumer_offsets-33,__consumer_offsets-23,__consumer_offsets-49,__consumer_offsets-47,__consumer_offsets-16,__consumer_offsets-28,__consumer_offsets-31,__consumer_offsets-36,__consumer_offsets-42,__consumer_offsets-3,__consumer_offsets-18,__consumer_offsets-37,__consumer_offsets-15,__consumer_offsets-24,__consumer_offsets-38,__consumer_offsets-17,__consumer_offsets-48,__consumer_offsets-19,__consumer_offsets-11,__consumer_offsets-13,__consumer_offsets-2,__consumer_offsets-43,__consumer_offsets-6,__consumer_offsets-14,__consumer_offsets-20,__consumer_offsets-0,__consumer_offsets-44,__consumer_offsets-39,__consumer_offsets-12,__consumer_offsets-45,__consumer_offsets-1,__consumer_offsets-5,__consumer_offsets-26,__consumer_offsets-29,__consumer_offsets-34,__consumer_offsets-10,__consumer_offsets-32,__consumer_offsets-40 (kafka.controller.KafkaController)
[2020-04-14 17:28:12,375] DEBUG preRegister called. Server=com.sun.jmx.mbeanserver.JmxMBeanServer@66d3c617, name=log4j:logger=kafka.controller (kafka.controller)
[2020-04-14 17:28:23,908] INFO [ControllerEventThread controllerId=2] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-04-14 17:28:24,247] INFO [ControllerEventThread controllerId=0] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-04-14 17:28:24,261] INFO [ControllerEventThread controllerId=1] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-04-14 17:28:24,470] INFO [Controller id=2] 2 successfully elected as the controller. Epoch incremented to 1 and epoch zk version is now 1 (kafka.controller.KafkaController)
[2020-04-14 17:28:24,471] INFO [Controller id=2] Registering handlers (kafka.controller.KafkaController)
[2020-04-14 17:28:24,476] DEBUG [Controller id=0] Broker 2 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2020-04-14 17:28:24,477] INFO [Controller id=2] Deleting log dir event notifications (kafka.controller.KafkaController)
[2020-04-14 17:28:24,485] INFO [Controller id=2] Deleting isr change notifications (kafka.controller.KafkaController)
[2020-04-14 17:28:24,487] DEBUG [Controller id=1] Broker 2 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2020-04-14 17:28:24,490] INFO [Controller id=2] Initializing controller context (kafka.controller.KafkaController)
[2020-04-14 17:28:24,697] INFO [Controller id=2] Initialized broker epochs cache: Map(0 -> 72, 1 -> 71, 2 -> 70) (kafka.controller.KafkaController)
[2020-04-14 17:28:25,260] DEBUG [Controller id=2] Register BrokerModifications handler for Set(0, 1, 2) (kafka.controller.KafkaController)
[2020-04-14 17:28:25,506] DEBUG [Channel manager on controller 2]: Controller 2 trying to connect to broker 0 (kafka.controller.ControllerChannelManager)
[2020-04-14 17:28:25,526] DEBUG [Channel manager on controller 2]: Controller 2 trying to connect to broker 1 (kafka.controller.ControllerChannelManager)
[2020-04-14 17:28:25,533] DEBUG [Channel manager on controller 2]: Controller 2 trying to connect to broker 2 (kafka.controller.ControllerChannelManager)
[2020-04-14 17:28:25,538] INFO [RequestSendThread controllerId=2] Starting (kafka.controller.RequestSendThread)
[2020-04-14 17:28:25,559] INFO [Controller id=2] Currently active brokers in the cluster: Set(0, 1, 2) (kafka.controller.KafkaController)
[2020-04-14 17:28:25,560] INFO [Controller id=2] Currently shutting brokers in the cluster: Set() (kafka.controller.KafkaController)
[2020-04-14 17:28:25,561] INFO [Controller id=2] Current list of topics in the cluster: Set() (kafka.controller.KafkaController)
[2020-04-14 17:28:25,562] INFO [Controller id=2] Fetching topic deletions in progress (kafka.controller.KafkaController)
[2020-04-14 17:28:25,563] INFO [RequestSendThread controllerId=2] Starting (kafka.controller.RequestSendThread)
[2020-04-14 17:28:25,565] INFO [RequestSendThread controllerId=2] Starting (kafka.controller.RequestSendThread)
[2020-04-14 17:28:25,569] INFO [Controller id=2] List of topics to be deleted:  (kafka.controller.KafkaController)
[2020-04-14 17:28:25,570] INFO [Controller id=2] List of topics ineligible for deletion:  (kafka.controller.KafkaController)
[2020-04-14 17:28:25,571] INFO [Controller id=2] Initializing topic deletion manager (kafka.controller.KafkaController)
[2020-04-14 17:28:25,571] INFO [Topic Deletion Manager 2] Initializing manager with initial deletions: Set(), initial ineligible deletions: Set() (kafka.controller.TopicDeletionManager)
[2020-04-14 17:28:25,572] INFO [Controller id=2] Sending update metadata request (kafka.controller.KafkaController)
[2020-04-14 17:28:25,605] INFO [ReplicaStateMachine controllerId=2] Initializing replica state (kafka.controller.ZkReplicaStateMachine)
[2020-04-14 17:28:25,607] INFO [ReplicaStateMachine controllerId=2] Triggering online replica state changes (kafka.controller.ZkReplicaStateMachine)
[2020-04-14 17:28:25,637] INFO [ReplicaStateMachine controllerId=2] Triggering offline replica state changes (kafka.controller.ZkReplicaStateMachine)
[2020-04-14 17:28:25,637] DEBUG [ReplicaStateMachine controllerId=2] Started replica state machine with initial state -> Map() (kafka.controller.ZkReplicaStateMachine)
[2020-04-14 17:28:25,639] INFO [PartitionStateMachine controllerId=2] Initializing partition state (kafka.controller.ZkPartitionStateMachine)
[2020-04-14 17:28:25,642] INFO [PartitionStateMachine controllerId=2] Triggering online partition state changes (kafka.controller.ZkPartitionStateMachine)
[2020-04-14 17:28:25,647] INFO [RequestSendThread controllerId=2] Controller 2 connected to fp:9094 (id: 2 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-14 17:28:25,647] INFO [RequestSendThread controllerId=2] Controller 2 connected to fp:9092 (id: 0 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-14 17:28:25,651] INFO [RequestSendThread controllerId=2] Controller 2 connected to fp:9093 (id: 1 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-14 17:28:25,662] DEBUG [PartitionStateMachine controllerId=2] Started partition state machine with initial state -> Map() (kafka.controller.ZkPartitionStateMachine)
[2020-04-14 17:28:25,664] INFO [Controller id=2] Ready to serve as the new controller with epoch 1 (kafka.controller.KafkaController)
[2020-04-14 17:28:25,672] INFO [Controller id=2] Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2020-04-14 17:28:25,676] INFO [Controller id=2] Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2020-04-14 17:28:25,677] INFO [Controller id=2] Skipping preferred replica election for partitions due to topic deletion:  (kafka.controller.KafkaController)
[2020-04-14 17:28:25,677] INFO [Controller id=2] Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2020-04-14 17:28:25,680] INFO [Controller id=2] Starting replica leader election (PREFERRED) for partitions  triggered by ZkTriggered (kafka.controller.KafkaController)
[2020-04-14 17:28:26,084] INFO [Controller id=2] Starting the controller scheduler (kafka.controller.KafkaController)
[2020-04-14 17:28:26,988] INFO [Controller id=2] New topics: [Set(BatchTopic)], deleted topics: [Set()], new partition replica assignment [Map(BatchTopic-2 -> ReplicaAssignment(replicas=1,0,2, addingReplicas=, removingReplicas=), BatchTopic-1 -> ReplicaAssignment(replicas=2,1,0, addingReplicas=, removingReplicas=), BatchTopic-0 -> ReplicaAssignment(replicas=0,2,1, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-14 17:28:26,989] INFO [Controller id=2] New partition creation callback for BatchTopic-2,BatchTopic-1,BatchTopic-0 (kafka.controller.KafkaController)
[2020-04-14 17:28:31,085] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-04-14 17:28:31,086] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-04-14 17:28:31,087] DEBUG [Controller id=2] Preferred replicas by broker Map(2 -> Map(BatchTopic-1 -> Vector(2, 1, 0)), 1 -> Map(BatchTopic-2 -> Vector(1, 0, 2)), 0 -> Map(BatchTopic-0 -> Vector(0, 2, 1))) (kafka.controller.KafkaController)
[2020-04-14 17:28:31,088] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 Map() (kafka.controller.KafkaController)
[2020-04-14 17:28:31,089] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2020-04-14 17:28:31,089] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 Map() (kafka.controller.KafkaController)
[2020-04-14 17:28:31,089] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2020-04-14 17:28:31,089] DEBUG [Controller id=2] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-04-14 17:28:31,089] TRACE [Controller id=2] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-04-14 17:28:31,938] INFO [Controller id=2] New topics: [Set(ReportTopic)], deleted topics: [Set()], new partition replica assignment [Map(ReportTopic-2 -> ReplicaAssignment(replicas=2,1,0, addingReplicas=, removingReplicas=), ReportTopic-1 -> ReplicaAssignment(replicas=0,2,1, addingReplicas=, removingReplicas=), ReportTopic-0 -> ReplicaAssignment(replicas=1,0,2, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-14 17:28:31,939] INFO [Controller id=2] New partition creation callback for ReportTopic-2,ReportTopic-1,ReportTopic-0 (kafka.controller.KafkaController)
[2020-04-14 17:28:35,368] INFO [Controller id=2] New topics: [Set(AlarmTopic)], deleted topics: [Set()], new partition replica assignment [Map(AlarmTopic-2 -> ReplicaAssignment(replicas=1,0,2, addingReplicas=, removingReplicas=), AlarmTopic-1 -> ReplicaAssignment(replicas=2,1,0, addingReplicas=, removingReplicas=), AlarmTopic-0 -> ReplicaAssignment(replicas=0,2,1, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-14 17:28:35,369] INFO [Controller id=2] New partition creation callback for AlarmTopic-2,AlarmTopic-1,AlarmTopic-0 (kafka.controller.KafkaController)
[2020-04-14 17:33:31,089] INFO [Controller id=2] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-04-14 17:33:31,090] TRACE [Controller id=2] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-04-14 17:33:31,091] DEBUG [Controller id=2] Preferred replicas by broker Map(2 -> Map(ReportTopic-2 -> Vector(2, 1, 0), AlarmTopic-1 -> Vector(2, 1, 0), BatchTopic-1 -> Vector(2, 1, 0)), 1 -> Map(ReportTopic-0 -> Vector(1, 0, 2), AlarmTopic-2 -> Vector(1, 0, 2), BatchTopic-2 -> Vector(1, 0, 2)), 0 -> Map(AlarmTopic-0 -> Vector(0, 2, 1), BatchTopic-0 -> Vector(0, 2, 1), ReportTopic-1 -> Vector(0, 2, 1))) (kafka.controller.KafkaController)
[2020-04-14 17:33:31,092] DEBUG [Controller id=2] Topics not in preferred replica for broker 2 Map() (kafka.controller.KafkaController)
[2020-04-14 17:33:31,092] TRACE [Controller id=2] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2020-04-14 17:33:31,092] DEBUG [Controller id=2] Topics not in preferred replica for broker 1 Map() (kafka.controller.KafkaController)
[2020-04-14 17:33:31,092] TRACE [Controller id=2] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2020-04-14 17:33:31,092] DEBUG [Controller id=2] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-04-14 17:33:31,092] TRACE [Controller id=2] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-04-14 17:42:22,765] DEBUG preRegister called. Server=com.sun.jmx.mbeanserver.JmxMBeanServer@66d3c617, name=log4j:logger=kafka.controller (kafka.controller)
[2020-04-14 17:42:28,713] INFO [ControllerEventThread controllerId=1] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-04-14 17:42:29,047] INFO [ControllerEventThread controllerId=2] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-04-14 17:42:29,301] INFO [Controller id=1] 1 successfully elected as the controller. Epoch incremented to 1 and epoch zk version is now 1 (kafka.controller.KafkaController)
[2020-04-14 17:42:29,301] INFO [Controller id=1] Registering handlers (kafka.controller.KafkaController)
[2020-04-14 17:42:29,346] INFO [ControllerEventThread controllerId=0] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-04-14 17:42:29,422] INFO [Controller id=1] Deleting log dir event notifications (kafka.controller.KafkaController)
[2020-04-14 17:42:29,425] DEBUG [Controller id=0] Broker 1 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2020-04-14 17:42:29,426] INFO [Controller id=1] Deleting isr change notifications (kafka.controller.KafkaController)
[2020-04-14 17:42:29,429] INFO [Controller id=1] Initializing controller context (kafka.controller.KafkaController)
[2020-04-14 17:42:29,430] DEBUG [Controller id=2] Broker 1 was elected as controller instead of broker 2 (kafka.controller.KafkaController)
org.apache.kafka.common.errors.ControllerMovedException: Controller moved to another broker. Aborting controller startup procedure
[2020-04-14 17:42:29,816] INFO [Controller id=1] Initialized broker epochs cache: Map(0 -> 64, 1 -> 62, 2 -> 63) (kafka.controller.KafkaController)
[2020-04-14 17:42:30,016] DEBUG [Controller id=1] Register BrokerModifications handler for Set(0, 1, 2) (kafka.controller.KafkaController)
[2020-04-14 17:42:30,276] DEBUG [Channel manager on controller 1]: Controller 1 trying to connect to broker 0 (kafka.controller.ControllerChannelManager)
[2020-04-14 17:42:30,284] DEBUG [Channel manager on controller 1]: Controller 1 trying to connect to broker 1 (kafka.controller.ControllerChannelManager)
[2020-04-14 17:42:30,287] DEBUG [Channel manager on controller 1]: Controller 1 trying to connect to broker 2 (kafka.controller.ControllerChannelManager)
[2020-04-14 17:42:30,297] INFO [RequestSendThread controllerId=1] Starting (kafka.controller.RequestSendThread)
[2020-04-14 17:42:30,297] INFO [RequestSendThread controllerId=1] Starting (kafka.controller.RequestSendThread)
[2020-04-14 17:42:30,297] INFO [RequestSendThread controllerId=1] Starting (kafka.controller.RequestSendThread)
[2020-04-14 17:42:30,298] INFO [Controller id=1] Currently active brokers in the cluster: Set(0, 1, 2) (kafka.controller.KafkaController)
[2020-04-14 17:42:30,298] INFO [Controller id=1] Currently shutting brokers in the cluster: Set() (kafka.controller.KafkaController)
[2020-04-14 17:42:30,299] INFO [Controller id=1] Current list of topics in the cluster: Set() (kafka.controller.KafkaController)
[2020-04-14 17:42:30,299] INFO [Controller id=1] Fetching topic deletions in progress (kafka.controller.KafkaController)
[2020-04-14 17:42:30,303] INFO [Controller id=1] List of topics to be deleted:  (kafka.controller.KafkaController)
[2020-04-14 17:42:30,304] INFO [Controller id=1] List of topics ineligible for deletion:  (kafka.controller.KafkaController)
[2020-04-14 17:42:30,304] INFO [Controller id=1] Initializing topic deletion manager (kafka.controller.KafkaController)
[2020-04-14 17:42:30,305] INFO [Topic Deletion Manager 1] Initializing manager with initial deletions: Set(), initial ineligible deletions: Set() (kafka.controller.TopicDeletionManager)
[2020-04-14 17:42:30,306] INFO [Controller id=1] Sending update metadata request (kafka.controller.KafkaController)
[2020-04-14 17:42:30,331] INFO [ReplicaStateMachine controllerId=1] Initializing replica state (kafka.controller.ZkReplicaStateMachine)
[2020-04-14 17:42:30,337] INFO [ReplicaStateMachine controllerId=1] Triggering online replica state changes (kafka.controller.ZkReplicaStateMachine)
[2020-04-14 17:42:30,340] INFO [RequestSendThread controllerId=1] Controller 1 connected to fp:9093 (id: 1 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-14 17:42:30,341] INFO [RequestSendThread controllerId=1] Controller 1 connected to fp:9094 (id: 2 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-14 17:42:30,342] INFO [RequestSendThread controllerId=1] Controller 1 connected to fp:9092 (id: 0 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-14 17:42:30,343] INFO [ReplicaStateMachine controllerId=1] Triggering offline replica state changes (kafka.controller.ZkReplicaStateMachine)
[2020-04-14 17:42:30,345] DEBUG [ReplicaStateMachine controllerId=1] Started replica state machine with initial state -> Map() (kafka.controller.ZkReplicaStateMachine)
[2020-04-14 17:42:30,346] INFO [PartitionStateMachine controllerId=1] Initializing partition state (kafka.controller.ZkPartitionStateMachine)
[2020-04-14 17:42:30,347] INFO [PartitionStateMachine controllerId=1] Triggering online partition state changes (kafka.controller.ZkPartitionStateMachine)
[2020-04-14 17:42:30,355] DEBUG [PartitionStateMachine controllerId=1] Started partition state machine with initial state -> Map() (kafka.controller.ZkPartitionStateMachine)
[2020-04-14 17:42:30,355] INFO [Controller id=1] Ready to serve as the new controller with epoch 1 (kafka.controller.KafkaController)
[2020-04-14 17:42:30,360] INFO [Controller id=1] Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2020-04-14 17:42:30,361] INFO [Controller id=1] Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2020-04-14 17:42:30,361] INFO [Controller id=1] Skipping preferred replica election for partitions due to topic deletion:  (kafka.controller.KafkaController)
[2020-04-14 17:42:30,361] INFO [Controller id=1] Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2020-04-14 17:42:30,363] INFO [Controller id=1] Starting replica leader election (PREFERRED) for partitions  triggered by ZkTriggered (kafka.controller.KafkaController)
[2020-04-14 17:42:30,479] INFO [Controller id=1] Starting the controller scheduler (kafka.controller.KafkaController)
[2020-04-14 17:42:31,387] INFO [Controller id=1] New topics: [Set(BatchTopic)], deleted topics: [Set()], new partition replica assignment [Map(BatchTopic-2 -> ReplicaAssignment(replicas=1,0,2, addingReplicas=, removingReplicas=), BatchTopic-1 -> ReplicaAssignment(replicas=2,1,0, addingReplicas=, removingReplicas=), BatchTopic-0 -> ReplicaAssignment(replicas=0,2,1, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-14 17:42:31,388] INFO [Controller id=1] New partition creation callback for BatchTopic-2,BatchTopic-1,BatchTopic-0 (kafka.controller.KafkaController)
[2020-04-14 17:42:35,481] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-04-14 17:42:35,481] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-04-14 17:42:35,483] DEBUG [Controller id=1] Preferred replicas by broker Map(2 -> Map(BatchTopic-1 -> Vector(2, 1, 0)), 1 -> Map(BatchTopic-2 -> Vector(1, 0, 2)), 0 -> Map(BatchTopic-0 -> Vector(0, 2, 1))) (kafka.controller.KafkaController)
[2020-04-14 17:42:35,484] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 Map() (kafka.controller.KafkaController)
[2020-04-14 17:42:35,485] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2020-04-14 17:42:35,485] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 Map() (kafka.controller.KafkaController)
[2020-04-14 17:42:35,485] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2020-04-14 17:42:35,486] DEBUG [Controller id=1] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-04-14 17:42:35,486] TRACE [Controller id=1] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-04-14 17:42:36,570] INFO [Controller id=1] New topics: [Set(ReportTopic)], deleted topics: [Set()], new partition replica assignment [Map(ReportTopic-2 -> ReplicaAssignment(replicas=1,2,0, addingReplicas=, removingReplicas=), ReportTopic-1 -> ReplicaAssignment(replicas=2,0,1, addingReplicas=, removingReplicas=), ReportTopic-0 -> ReplicaAssignment(replicas=0,1,2, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-14 17:42:36,571] INFO [Controller id=1] New partition creation callback for ReportTopic-2,ReportTopic-1,ReportTopic-0 (kafka.controller.KafkaController)
[2020-04-14 17:42:40,831] INFO [Controller id=1] New topics: [Set(AlarmTopic)], deleted topics: [Set()], new partition replica assignment [Map(AlarmTopic-2 -> ReplicaAssignment(replicas=2,1,0, addingReplicas=, removingReplicas=), AlarmTopic-1 -> ReplicaAssignment(replicas=0,2,1, addingReplicas=, removingReplicas=), AlarmTopic-0 -> ReplicaAssignment(replicas=1,0,2, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-14 17:42:40,832] INFO [Controller id=1] New partition creation callback for AlarmTopic-2,AlarmTopic-1,AlarmTopic-0 (kafka.controller.KafkaController)
[2020-04-14 17:42:45,244] INFO [Controller id=1] New topics: [Set(__consumer_offsets)], deleted topics: [Set()], new partition replica assignment [Map(__consumer_offsets-22 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-30 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-8 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-21 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-4 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-27 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-7 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-9 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-46 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-25 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-35 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-41 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-33 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-23 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-49 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-47 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-16 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-28 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-31 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-36 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-42 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-3 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-18 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-37 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-15 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-24 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-38 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-17 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-48 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-19 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-11 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-13 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-2 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-43 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-6 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-14 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-20 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-0 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-44 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-39 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-12 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-45 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-1 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-5 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-26 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-29 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-34 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-10 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-32 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-40 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-14 17:42:45,244] INFO [Controller id=1] New partition creation callback for __consumer_offsets-22,__consumer_offsets-30,__consumer_offsets-8,__consumer_offsets-21,__consumer_offsets-4,__consumer_offsets-27,__consumer_offsets-7,__consumer_offsets-9,__consumer_offsets-46,__consumer_offsets-25,__consumer_offsets-35,__consumer_offsets-41,__consumer_offsets-33,__consumer_offsets-23,__consumer_offsets-49,__consumer_offsets-47,__consumer_offsets-16,__consumer_offsets-28,__consumer_offsets-31,__consumer_offsets-36,__consumer_offsets-42,__consumer_offsets-3,__consumer_offsets-18,__consumer_offsets-37,__consumer_offsets-15,__consumer_offsets-24,__consumer_offsets-38,__consumer_offsets-17,__consumer_offsets-48,__consumer_offsets-19,__consumer_offsets-11,__consumer_offsets-13,__consumer_offsets-2,__consumer_offsets-43,__consumer_offsets-6,__consumer_offsets-14,__consumer_offsets-20,__consumer_offsets-0,__consumer_offsets-44,__consumer_offsets-39,__consumer_offsets-12,__consumer_offsets-45,__consumer_offsets-1,__consumer_offsets-5,__consumer_offsets-26,__consumer_offsets-29,__consumer_offsets-34,__consumer_offsets-10,__consumer_offsets-32,__consumer_offsets-40 (kafka.controller.KafkaController)
>>>>>>> 809d645c86fffe30950a436b7dfba87723b03866
