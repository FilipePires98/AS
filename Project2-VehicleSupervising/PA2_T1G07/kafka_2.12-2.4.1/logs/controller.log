[2020-04-06 17:03:39,255] INFO [ControllerEventThread controllerId=2] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-04-06 17:03:39,293] DEBUG [Controller id=2] Broker 0 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2020-04-06 17:05:41,509] DEBUG preRegister called. Server=com.sun.jmx.mbeanserver.JmxMBeanServer@66d3c617, name=log4j:logger=kafka.controller (kafka.controller)
[2020-04-06 17:05:43,743] INFO [ControllerEventThread controllerId=1] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-04-06 17:05:43,777] INFO [Controller id=1] 1 successfully elected as the controller. Epoch incremented to 1 and epoch zk version is now 1 (kafka.controller.KafkaController)
[2020-04-06 17:05:43,777] INFO [Controller id=1] Registering handlers (kafka.controller.KafkaController)
[2020-04-06 17:05:43,779] INFO [ControllerEventThread controllerId=2] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-04-06 17:05:43,782] INFO [Controller id=1] Deleting log dir event notifications (kafka.controller.KafkaController)
[2020-04-06 17:05:43,786] INFO [Controller id=1] Deleting isr change notifications (kafka.controller.KafkaController)
[2020-04-06 17:05:43,792] INFO [Controller id=1] Initializing controller context (kafka.controller.KafkaController)
[2020-04-06 17:05:43,799] DEBUG [Controller id=2] Broker 1 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2020-04-06 17:05:43,869] INFO [Controller id=1] Initialized broker epochs cache: Map(0 -> 56, 1 -> 54, 2 -> 55) (kafka.controller.KafkaController)
[2020-04-06 17:05:43,874] DEBUG [Controller id=1] Register BrokerModifications handler for Set(0, 1, 2) (kafka.controller.KafkaController)
[2020-04-06 17:05:43,880] DEBUG [Channel manager on controller 1]: Controller 1 trying to connect to broker 0 (kafka.controller.ControllerChannelManager)
[2020-04-06 17:05:43,890] DEBUG [Channel manager on controller 1]: Controller 1 trying to connect to broker 1 (kafka.controller.ControllerChannelManager)
[2020-04-06 17:05:43,894] INFO [ControllerEventThread controllerId=0] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-04-06 17:05:43,895] DEBUG [Channel manager on controller 1]: Controller 1 trying to connect to broker 2 (kafka.controller.ControllerChannelManager)
[2020-04-06 17:05:43,905] INFO [RequestSendThread controllerId=1] Starting (kafka.controller.RequestSendThread)
[2020-04-06 17:05:43,905] INFO [RequestSendThread controllerId=1] Starting (kafka.controller.RequestSendThread)
[2020-04-06 17:05:43,905] INFO [Controller id=1] Currently active brokers in the cluster: Set(0, 1, 2) (kafka.controller.KafkaController)
[2020-04-06 17:05:43,906] INFO [RequestSendThread controllerId=1] Starting (kafka.controller.RequestSendThread)
[2020-04-06 17:05:43,906] INFO [Controller id=1] Currently shutting brokers in the cluster: Set() (kafka.controller.KafkaController)
[2020-04-06 17:05:43,907] INFO [Controller id=1] Current list of topics in the cluster: Set() (kafka.controller.KafkaController)
[2020-04-06 17:05:43,907] INFO [Controller id=1] Fetching topic deletions in progress (kafka.controller.KafkaController)
[2020-04-06 17:05:43,910] INFO [Controller id=1] List of topics to be deleted:  (kafka.controller.KafkaController)
[2020-04-06 17:05:43,911] INFO [Controller id=1] List of topics ineligible for deletion:  (kafka.controller.KafkaController)
[2020-04-06 17:05:43,911] INFO [Controller id=1] Initializing topic deletion manager (kafka.controller.KafkaController)
[2020-04-06 17:05:43,912] INFO [Topic Deletion Manager 1] Initializing manager with initial deletions: Set(), initial ineligible deletions: Set() (kafka.controller.TopicDeletionManager)
[2020-04-06 17:05:43,912] INFO [Controller id=1] Sending update metadata request (kafka.controller.KafkaController)
[2020-04-06 17:05:43,914] DEBUG [Controller id=0] Broker 1 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2020-04-06 17:05:43,933] INFO [ReplicaStateMachine controllerId=1] Initializing replica state (kafka.controller.ZkReplicaStateMachine)
[2020-04-06 17:05:43,934] INFO [ReplicaStateMachine controllerId=1] Triggering online replica state changes (kafka.controller.ZkReplicaStateMachine)
[2020-04-06 17:05:43,942] INFO [RequestSendThread controllerId=1] Controller 1 connected to pc:9094 (id: 2 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-06 17:05:43,943] INFO [RequestSendThread controllerId=1] Controller 1 connected to pc:9093 (id: 1 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-06 17:05:43,943] INFO [RequestSendThread controllerId=1] Controller 1 connected to pc:9092 (id: 0 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-06 17:05:43,947] INFO [ReplicaStateMachine controllerId=1] Triggering offline replica state changes (kafka.controller.ZkReplicaStateMachine)
[2020-04-06 17:05:43,948] DEBUG [ReplicaStateMachine controllerId=1] Started replica state machine with initial state -> Map() (kafka.controller.ZkReplicaStateMachine)
[2020-04-06 17:05:43,948] INFO [PartitionStateMachine controllerId=1] Initializing partition state (kafka.controller.ZkPartitionStateMachine)
[2020-04-06 17:05:43,949] INFO [PartitionStateMachine controllerId=1] Triggering online partition state changes (kafka.controller.ZkPartitionStateMachine)
[2020-04-06 17:05:43,955] DEBUG [PartitionStateMachine controllerId=1] Started partition state machine with initial state -> Map() (kafka.controller.ZkPartitionStateMachine)
[2020-04-06 17:05:43,955] INFO [Controller id=1] Ready to serve as the new controller with epoch 1 (kafka.controller.KafkaController)
[2020-04-06 17:05:43,961] INFO [Controller id=1] Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2020-04-06 17:05:43,961] INFO [Controller id=1] Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2020-04-06 17:05:43,961] INFO [Controller id=1] Skipping preferred replica election for partitions due to topic deletion:  (kafka.controller.KafkaController)
[2020-04-06 17:05:43,962] INFO [Controller id=1] Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2020-04-06 17:05:43,963] INFO [Controller id=1] Starting replica leader election (PREFERRED) for partitions  triggered by ZkTriggered (kafka.controller.KafkaController)
[2020-04-06 17:05:43,977] INFO [Controller id=1] Starting the controller scheduler (kafka.controller.KafkaController)
[2020-04-06 17:05:44,789] INFO [Controller id=1] New topics: [Set(BatchTopic)], deleted topics: [Set()], new partition replica assignment [Map(BatchTopic-0 -> ReplicaAssignment(replicas=2,1,0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-06 17:05:44,789] INFO [Controller id=1] New partition creation callback for BatchTopic-0 (kafka.controller.KafkaController)
[2020-04-06 17:05:46,924] INFO [Controller id=1] New topics: [Set(ReportTopic)], deleted topics: [Set()], new partition replica assignment [Map(ReportTopic-0 -> ReplicaAssignment(replicas=1,0,2, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-06 17:05:46,924] INFO [Controller id=1] New partition creation callback for ReportTopic-0 (kafka.controller.KafkaController)
[2020-04-06 17:05:48,978] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-04-06 17:05:48,979] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-04-06 17:05:48,981] DEBUG [Controller id=1] Preferred replicas by broker Map(2 -> Map(BatchTopic-0 -> Vector(2, 1, 0)), 1 -> Map(ReportTopic-0 -> Vector(1, 0, 2))) (kafka.controller.KafkaController)
[2020-04-06 17:05:48,982] DEBUG [Controller id=1] Topics not in preferred replica for broker 2 Map() (kafka.controller.KafkaController)
[2020-04-06 17:05:48,983] TRACE [Controller id=1] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2020-04-06 17:05:48,984] DEBUG [Controller id=1] Topics not in preferred replica for broker 1 Map() (kafka.controller.KafkaController)
[2020-04-06 17:05:48,984] TRACE [Controller id=1] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2020-04-06 17:05:49,088] INFO [Controller id=1] New topics: [Set(AlarmTopic)], deleted topics: [Set()], new partition replica assignment [Map(AlarmTopic-0 -> ReplicaAssignment(replicas=0,2,1, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-06 17:05:49,088] INFO [Controller id=1] New partition creation callback for AlarmTopic-0 (kafka.controller.KafkaController)
[2020-04-06 17:05:52,970] INFO [Controller id=1] New topics: [Set(__consumer_offsets)], deleted topics: [Set()], new partition replica assignment [Map(__consumer_offsets-22 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-30 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-8 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-21 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-4 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-27 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-7 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-9 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-46 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-25 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-35 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-41 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-33 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-23 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-49 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-47 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-16 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-28 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-31 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-36 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-42 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-3 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-18 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-37 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-15 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-24 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-38 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-17 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-48 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-19 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-11 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-13 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-2 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-43 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-6 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-14 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-20 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-44 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-39 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-12 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-45 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-1 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-5 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-26 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-29 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-34 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-10 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-32 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-40 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-06 17:05:52,970] INFO [Controller id=1] New partition creation callback for __consumer_offsets-22,__consumer_offsets-30,__consumer_offsets-8,__consumer_offsets-21,__consumer_offsets-4,__consumer_offsets-27,__consumer_offsets-7,__consumer_offsets-9,__consumer_offsets-46,__consumer_offsets-25,__consumer_offsets-35,__consumer_offsets-41,__consumer_offsets-33,__consumer_offsets-23,__consumer_offsets-49,__consumer_offsets-47,__consumer_offsets-16,__consumer_offsets-28,__consumer_offsets-31,__consumer_offsets-36,__consumer_offsets-42,__consumer_offsets-3,__consumer_offsets-18,__consumer_offsets-37,__consumer_offsets-15,__consumer_offsets-24,__consumer_offsets-38,__consumer_offsets-17,__consumer_offsets-48,__consumer_offsets-19,__consumer_offsets-11,__consumer_offsets-13,__consumer_offsets-2,__consumer_offsets-43,__consumer_offsets-6,__consumer_offsets-14,__consumer_offsets-20,__consumer_offsets-0,__consumer_offsets-44,__consumer_offsets-39,__consumer_offsets-12,__consumer_offsets-45,__consumer_offsets-1,__consumer_offsets-5,__consumer_offsets-26,__consumer_offsets-29,__consumer_offsets-34,__consumer_offsets-10,__consumer_offsets-32,__consumer_offsets-40 (kafka.controller.KafkaController)
[2020-04-06 17:08:18,088] DEBUG preRegister called. Server=com.sun.jmx.mbeanserver.JmxMBeanServer@66d3c617, name=log4j:logger=kafka.controller (kafka.controller)
[2020-04-06 17:08:20,170] INFO [ControllerEventThread controllerId=0] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-04-06 17:08:20,204] INFO [Controller id=0] 0 successfully elected as the controller. Epoch incremented to 1 and epoch zk version is now 1 (kafka.controller.KafkaController)
[2020-04-06 17:08:20,204] INFO [Controller id=0] Registering handlers (kafka.controller.KafkaController)
[2020-04-06 17:08:20,216] INFO [Controller id=0] Deleting log dir event notifications (kafka.controller.KafkaController)
[2020-04-06 17:08:20,221] INFO [Controller id=0] Deleting isr change notifications (kafka.controller.KafkaController)
[2020-04-06 17:08:20,225] INFO [Controller id=0] Initializing controller context (kafka.controller.KafkaController)
[2020-04-06 17:08:20,239] INFO [ControllerEventThread controllerId=2] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-04-06 17:08:20,275] INFO [Controller id=0] Initialized broker epochs cache: Map(0 -> 58, 1 -> 62, 2 -> 59) (kafka.controller.KafkaController)
[2020-04-06 17:08:20,277] DEBUG [Controller id=2] Broker 0 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2020-04-06 17:08:20,283] DEBUG [Controller id=0] Register BrokerModifications handler for Set(0, 1, 2) (kafka.controller.KafkaController)
[2020-04-06 17:08:20,291] DEBUG [Channel manager on controller 0]: Controller 0 trying to connect to broker 0 (kafka.controller.ControllerChannelManager)
[2020-04-06 17:08:20,301] DEBUG [Channel manager on controller 0]: Controller 0 trying to connect to broker 1 (kafka.controller.ControllerChannelManager)
[2020-04-06 17:08:20,307] DEBUG [Channel manager on controller 0]: Controller 0 trying to connect to broker 2 (kafka.controller.ControllerChannelManager)
[2020-04-06 17:08:20,327] INFO [RequestSendThread controllerId=0] Starting (kafka.controller.RequestSendThread)
[2020-04-06 17:08:20,339] INFO [RequestSendThread controllerId=0] Starting (kafka.controller.RequestSendThread)
[2020-04-06 17:08:20,340] INFO [Controller id=0] Currently active brokers in the cluster: Set(0, 1, 2) (kafka.controller.KafkaController)
[2020-04-06 17:08:20,341] INFO [ControllerEventThread controllerId=1] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-04-06 17:08:20,341] INFO [Controller id=0] Currently shutting brokers in the cluster: Set() (kafka.controller.KafkaController)
[2020-04-06 17:08:20,341] INFO [Controller id=0] Current list of topics in the cluster: Set() (kafka.controller.KafkaController)
[2020-04-06 17:08:20,342] INFO [Controller id=0] Fetching topic deletions in progress (kafka.controller.KafkaController)
[2020-04-06 17:08:20,342] INFO [RequestSendThread controllerId=0] Starting (kafka.controller.RequestSendThread)
[2020-04-06 17:08:20,345] INFO [Controller id=0] List of topics to be deleted:  (kafka.controller.KafkaController)
[2020-04-06 17:08:20,345] INFO [Controller id=0] List of topics ineligible for deletion:  (kafka.controller.KafkaController)
[2020-04-06 17:08:20,346] INFO [Controller id=0] Initializing topic deletion manager (kafka.controller.KafkaController)
[2020-04-06 17:08:20,346] INFO [Topic Deletion Manager 0] Initializing manager with initial deletions: Set(), initial ineligible deletions: Set() (kafka.controller.TopicDeletionManager)
[2020-04-06 17:08:20,347] INFO [Controller id=0] Sending update metadata request (kafka.controller.KafkaController)
[2020-04-06 17:08:20,368] DEBUG [Controller id=1] Broker 0 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2020-04-06 17:08:20,369] INFO [ReplicaStateMachine controllerId=0] Initializing replica state (kafka.controller.ZkReplicaStateMachine)
[2020-04-06 17:08:20,370] INFO [ReplicaStateMachine controllerId=0] Triggering online replica state changes (kafka.controller.ZkReplicaStateMachine)
[2020-04-06 17:08:20,379] INFO [ReplicaStateMachine controllerId=0] Triggering offline replica state changes (kafka.controller.ZkReplicaStateMachine)
[2020-04-06 17:08:20,380] DEBUG [ReplicaStateMachine controllerId=0] Started replica state machine with initial state -> Map() (kafka.controller.ZkReplicaStateMachine)
[2020-04-06 17:08:20,380] INFO [PartitionStateMachine controllerId=0] Initializing partition state (kafka.controller.ZkPartitionStateMachine)
[2020-04-06 17:08:20,381] INFO [PartitionStateMachine controllerId=0] Triggering online partition state changes (kafka.controller.ZkPartitionStateMachine)
[2020-04-06 17:08:20,389] DEBUG [PartitionStateMachine controllerId=0] Started partition state machine with initial state -> Map() (kafka.controller.ZkPartitionStateMachine)
[2020-04-06 17:08:20,389] INFO [Controller id=0] Ready to serve as the new controller with epoch 1 (kafka.controller.KafkaController)
[2020-04-06 17:08:20,390] INFO [RequestSendThread controllerId=0] Controller 0 connected to pc:9094 (id: 2 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-06 17:08:20,390] INFO [RequestSendThread controllerId=0] Controller 0 connected to pc:9092 (id: 0 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-06 17:08:20,392] INFO [RequestSendThread controllerId=0] Controller 0 connected to pc:9093 (id: 1 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-06 17:08:20,397] INFO [Controller id=0] Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2020-04-06 17:08:20,398] INFO [Controller id=0] Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2020-04-06 17:08:20,398] INFO [Controller id=0] Skipping preferred replica election for partitions due to topic deletion:  (kafka.controller.KafkaController)
[2020-04-06 17:08:20,399] INFO [Controller id=0] Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2020-04-06 17:08:20,400] INFO [Controller id=0] Starting replica leader election (PREFERRED) for partitions  triggered by ZkTriggered (kafka.controller.KafkaController)
[2020-04-06 17:08:20,426] INFO [Controller id=0] Starting the controller scheduler (kafka.controller.KafkaController)
[2020-04-06 17:08:21,047] INFO [Controller id=0] New topics: [Set(BatchTopic)], deleted topics: [Set()], new partition replica assignment [Map(BatchTopic-0 -> ReplicaAssignment(replicas=0,2,1, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-06 17:08:21,047] INFO [Controller id=0] New partition creation callback for BatchTopic-0 (kafka.controller.KafkaController)
[2020-04-06 17:08:23,010] INFO [Controller id=0] New topics: [Set(ReportTopic)], deleted topics: [Set()], new partition replica assignment [Map(ReportTopic-0 -> ReplicaAssignment(replicas=0,2,1, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-06 17:08:23,010] INFO [Controller id=0] New partition creation callback for ReportTopic-0 (kafka.controller.KafkaController)
[2020-04-06 17:08:24,675] INFO [Controller id=0] New topics: [Set(AlarmTopic)], deleted topics: [Set()], new partition replica assignment [Map(AlarmTopic-0 -> ReplicaAssignment(replicas=0,2,1, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-06 17:08:24,676] INFO [Controller id=0] New partition creation callback for AlarmTopic-0 (kafka.controller.KafkaController)
[2020-04-06 17:08:25,428] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-04-06 17:08:25,429] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-04-06 17:08:25,431] DEBUG [Controller id=0] Preferred replicas by broker Map(0 -> Map(ReportTopic-0 -> Vector(0, 2, 1), BatchTopic-0 -> Vector(0, 2, 1), AlarmTopic-0 -> Vector(0, 2, 1))) (kafka.controller.KafkaController)
[2020-04-06 17:08:25,433] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-04-06 17:08:25,436] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-04-06 17:08:28,396] INFO [Controller id=0] New topics: [Set(__consumer_offsets)], deleted topics: [Set()], new partition replica assignment [Map(__consumer_offsets-22 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-30 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-8 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-21 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-4 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-27 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-7 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-9 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-46 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-25 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-35 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-41 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-33 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-23 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-49 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-47 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-16 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-28 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-31 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-36 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-42 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-3 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-18 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-37 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-15 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-24 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-38 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-17 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-48 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-19 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-11 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-13 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-2 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-43 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-6 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-14 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-20 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-44 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-39 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-12 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-45 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-1 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-5 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-26 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-29 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-34 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-10 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-32 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-40 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-04-06 17:08:28,396] INFO [Controller id=0] New partition creation callback for __consumer_offsets-22,__consumer_offsets-30,__consumer_offsets-8,__consumer_offsets-21,__consumer_offsets-4,__consumer_offsets-27,__consumer_offsets-7,__consumer_offsets-9,__consumer_offsets-46,__consumer_offsets-25,__consumer_offsets-35,__consumer_offsets-41,__consumer_offsets-33,__consumer_offsets-23,__consumer_offsets-49,__consumer_offsets-47,__consumer_offsets-16,__consumer_offsets-28,__consumer_offsets-31,__consumer_offsets-36,__consumer_offsets-42,__consumer_offsets-3,__consumer_offsets-18,__consumer_offsets-37,__consumer_offsets-15,__consumer_offsets-24,__consumer_offsets-38,__consumer_offsets-17,__consumer_offsets-48,__consumer_offsets-19,__consumer_offsets-11,__consumer_offsets-13,__consumer_offsets-2,__consumer_offsets-43,__consumer_offsets-6,__consumer_offsets-14,__consumer_offsets-20,__consumer_offsets-0,__consumer_offsets-44,__consumer_offsets-39,__consumer_offsets-12,__consumer_offsets-45,__consumer_offsets-1,__consumer_offsets-5,__consumer_offsets-26,__consumer_offsets-29,__consumer_offsets-34,__consumer_offsets-10,__consumer_offsets-32,__consumer_offsets-40 (kafka.controller.KafkaController)
