package entities;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import kafkaUtils.Producer;
import message.Message;
import message.MessageSerializer;

/**
 * Class for the Collect Entity for the car supervising system.
 * 
 * @author Filipe Pires (85122) and Jo√£o Alegria (85048)
 */
public class CollectEntity extends JFrame {
    
    private BufferedReader CAR;
    private String[] topicNames = new String[]{"BatchTopic", "ReportTopic", "AlarmTopic"};

    /**
     * Creates new form CollectEntity
     */
    public CollectEntity() {
        this.setTitle("Collect Entity");
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        topicsToIncludeLabel = new javax.swing.JLabel();
        batchTopicCheckbox = new javax.swing.JCheckBox();
        reportTopicCheckbox = new javax.swing.JCheckBox();
        alarmTopicCheckbox = new javax.swing.JCheckBox();
        pathToCarDataLabel = new javax.swing.JLabel();
        filePath = new javax.swing.JTextField();
        startBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        logs = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setSize(new java.awt.Dimension(500, 360));

        topicsToIncludeLabel.setText("Topics to include:");

        batchTopicCheckbox.setSelected(true);
        batchTopicCheckbox.setText("BatchTopic");

        reportTopicCheckbox.setSelected(true);
        reportTopicCheckbox.setText("ReportTopic");

        alarmTopicCheckbox.setSelected(true);
        alarmTopicCheckbox.setText("AlarmTopic");

        pathToCarDataLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        pathToCarDataLabel.setText("Path to Car Data (.txt):");

        filePath.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        filePath.setText("(default path is ~/<ProjectLocation>/src/data)");

        startBtn.setText("Start");
        startBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                startBtnMouseClicked(evt);
            }
        });

        logs.setColumns(20);
        logs.setRows(5);
        jScrollPane1.setViewportView(logs);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pathToCarDataLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 494, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(startBtn)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(topicsToIncludeLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 467, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(batchTopicCheckbox, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(reportTopicCheckbox, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(alarmTopicCheckbox, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(filePath, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(6, 6, 6))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(topicsToIncludeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(batchTopicCheckbox, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(reportTopicCheckbox, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(alarmTopicCheckbox, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pathToCarDataLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(startBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_startBtnMouseClicked
        
        Map<Integer, Integer> processedMessages = new HashMap<Integer, Integer>();
        processedMessages.put(0,0);
        processedMessages.put(1,0);
        processedMessages.put(2,0);
        
        int total=0;
        
        Properties heartbeatProps = new Properties();
        heartbeatProps.put("bootstrap.servers", "localhost:9092, localhost:9093 ,localhost:9094");
        heartbeatProps.put("key.serializer", "org.apache.kafka.common.serialization.IntegerSerializer");
        heartbeatProps.put("value.serializer", MessageSerializer.class.getName());
        heartbeatProps.put("max.in.flight.requests.per.connection", 10);
        heartbeatProps.put("ack", "0");
        
        Properties speedProps = new Properties();
        speedProps.put("bootstrap.servers", "localhost:9092,localhost:9093,localhost:9094");
        speedProps.put("key.serializer", "org.apache.kafka.common.serialization.IntegerSerializer");
        speedProps.put("value.serializer", MessageSerializer.class.getName());
        speedProps.put("enable.idempotence", true);
        speedProps.put("acks", "all");
        
        Properties statusProps = new Properties();
        statusProps.put("bootstrap.servers", "localhost:9092, localhost:9093 ,localhost:9094");
        statusProps.put("key.serializer", "org.apache.kafka.common.serialization.IntegerSerializer");
        statusProps.put("value.serializer", MessageSerializer.class.getName());
        statusProps.put("acks", "all");
        statusProps.put("retries", 0);
        
        Producer<Integer,Message> heartbeatProducer = new Producer<>(heartbeatProps);
        
        Producer<Integer,Message> speedProducer = new Producer<>(speedProps);
        
        Producer<Integer,Message> statusProducer = new Producer<>(statusProps);
        
        //System.out.println("[Collect] User Dir: " + System.getProperty("user.dir"));
        //System.out.println("[Collect] Path Input Field: " + filePath.getText());
        
        String file = filePath.getText();
        if(file.equals("(default path is ~/<ProjectLocation>/src/data)")) {
            file = System.getProperty("user.dir") + "/src/data/CAR.TXT";
        }
        
        try{
            CAR = new BufferedReader(new FileReader(file));
            this.logs.append("Data file successfully opened for reading.\n");
            String line = CAR.readLine();
            String[] content;
            String car_reg; Long timestamp; int msgType; int speed; String status;
            int tmpCtr = 1;
            while(line != null) {
                Message msg;
                content = line.split("\\|");
                car_reg = content[1].trim();
                timestamp = Long.valueOf(content[2].trim());
                msgType = Integer.valueOf(content[3].trim());
                switch(msgType) {
                    case 0:
                        msg = new Message(car_reg,timestamp,msgType);
                        for(String topic : this.topicNames){
                            heartbeatProducer.fireAndForget(topic, null,tmpCtr,msg);
                        }
                        processedMessages.put(0, processedMessages.get(0)+1);
                        total++;
                        break;
                    case 1:
                        speed = Integer.valueOf(content[4].trim());
                        msg = new Message(car_reg,timestamp,msgType,speed);
                        for(String topic : this.topicNames){
                            speedProducer.fireAndForget(topic,0,tmpCtr,msg);
                        }
                        processedMessages.put(1, processedMessages.get(1)+1);
                        total++;
                        break;
                    case 2:
                        status = content[4].trim();
                        msg = new Message(car_reg,timestamp,msgType,status);
                        for(String topic : this.topicNames){
//                            boolean send=true;
//                            while(send){
//                                try {
//                                    send=false;
//                                    statusProducer.sendSync(topic,tmpCtr,msg);
//                                } catch (InterruptedException ex) {
//                                    send=true;
//                                } catch (ExecutionException ex) {
//                                    send=true;
//                                }
//                            }
                            statusProducer.fireAndForget(topic,0,tmpCtr,msg);
                        }
                        processedMessages.put(2, processedMessages.get(2)+1);
                        total++;
                        break;
                }
                line = CAR.readLine();
                tmpCtr++;
            }
//            heartbeatProducer.sendSync(this.topicNames,""+tmpCtr, new Message("",0l,4));
            heartbeatProducer.close();
            speedProducer.close();
            statusProducer.close();
            
            String tmp ="Heartbeat: "+processedMessages.get(0)+"; Speed: "+processedMessages.get(1)+"; Status: "+processedMessages.get(2)+"; Total: "+total+"\n";
            logs.append(tmp);
            
        } catch (IOException ex) {
            //ex.printStackTrace();
            String errorMsg = "Unable to open file for reading. Please make sure you write the correct path to the data file.";
            System.err.println("[Collect] " + errorMsg);
            System.err.println("[Collect] " + ex);
            this.logs.append("Error: " + errorMsg + "\n");
        } 
    }//GEN-LAST:event_startBtnMouseClicked
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        System.out.println("[Collect] Running...");
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CollectEntity.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CollectEntity.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CollectEntity.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CollectEntity.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CollectEntity().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox alarmTopicCheckbox;
    private javax.swing.JCheckBox batchTopicCheckbox;
    private javax.swing.JTextField filePath;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea logs;
    private javax.swing.JLabel pathToCarDataLabel;
    private javax.swing.JCheckBox reportTopicCheckbox;
    private javax.swing.JButton startBtn;
    private javax.swing.JLabel topicsToIncludeLabel;
    // End of variables declaration//GEN-END:variables

    

}
