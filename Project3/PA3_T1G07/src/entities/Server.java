package entities;

import common.*;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author fp
 */
public class Server extends javax.swing.JFrame implements MessageProcessor {
    
    private final int ID;
    private final int port;
    private SocketClient socketManager;
    private SocketServer socketServer;
    private Thread serverThread;

    /**
     * Creates new form Server
     */
    public Server(String args[]) {
        this.ID = Integer.parseInt(args[0]);
        this.port = Integer.valueOf(args[1]);
        
        this.setTitle("Server #" + this.ID);
        initComponents();
        
        this.initManagerClient();
        
        this.socketServer = new SocketServer(this.port, this);
        this.serverThread = new Thread(socketServer);
        this.serverThread.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Server(args).setVisible(true);
            }
        });
    }
    
    public void initManagerClient() {
        this.socketManager = new SocketClient("localhost", 6001);
        this.socketManager.send("| newServer | " + this.ID + " | " + this.port + " |");
    }
    
    private double calculatePi(int niter) {
        // Pi would be calculated here...
        try {
            Thread.sleep(niter);
        } catch (InterruptedException ex) {
            Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
        }
        return 3.1416;
    }

    @Override
    public void processMessage(String message) {
        String[] msg = message.split("|");
        for(String m: msg) {
            m = m.trim();
        }
        
        String reply = "| " + this.ID + " | " + msg[0] + " | " + msg[1] + " | 02 | " + msg[3] + " | " + this.calculatePi(Integer.valueOf(msg[3])) + " | ";
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
